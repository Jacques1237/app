{"ast":null,"code":"import { __extends, __awaiter, __generator, __assign } from 'tslib';\nimport { HostListener, Directive, ElementRef, Injectable, Inject, NgZone, defineInjectable, inject, Optional, Component, ChangeDetectionStrategy, ChangeDetectorRef, InjectionToken, ApplicationRef, Injector, ViewContainerRef, ComponentFactoryResolver, Attribute, SkipSelf, Output, EventEmitter, ViewChild, ContentChild, TemplateRef, IterableDiffers, APP_INITIALIZER, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOCUMENT, Location, LocationStrategy, CommonModule } from '@angular/common';\nimport { UrlSerializer, Router, NavigationStart, ActivatedRoute, ChildrenOutletContexts, PRIMARY_OUTLET, RouterLink } from '@angular/router';\nimport { isPlatform, getPlatforms, LIFECYCLE_WILL_ENTER, LIFECYCLE_DID_ENTER, LIFECYCLE_WILL_LEAVE, LIFECYCLE_DID_LEAVE, LIFECYCLE_WILL_UNLOAD, actionSheetController, alertController, loadingController, menuController, pickerController, modalController, popoverController, toastController } from '@ionic/core';\nimport { Subject, fromEvent, BehaviorSubject } from 'rxjs';\nimport { filter, switchMap, distinctUntilChanged } from 'rxjs/operators';\nimport { applyPolyfills, defineCustomElements } from '@ionic/core/loader';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/router';\nvar _c0 = [\"*\"];\nvar _c1 = [\"outlet\"];\nvar _c2 = [[[\"\", \"slot\", \"top\"]], \"*\"];\nvar _c3 = [\"[slot=top]\", \"*\"];\n\nvar raf =\n/**\n* @param {?} h\n* @return {?}\n*/\nfunction raf(h) {\n  if (typeof __zone_symbol__requestAnimationFrame === 'function') {\n    return __zone_symbol__requestAnimationFrame(h);\n  }\n\n  if (typeof requestAnimationFrame === 'function') {\n    return requestAnimationFrame(h);\n  }\n\n  return setTimeout(h);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ValueAccessor =\n/** @class */\nfunction () {\n  function ValueAccessor(el) {\n    this.el = el;\n\n    this.onChange =\n    /**\n    * @return {?}\n    */\n    function () {};\n\n    this.onTouched =\n    /**\n    * @return {?}\n    */\n    function () {};\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype.writeValue =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    this.el.nativeElement.value = this.lastValue = value == null ? '' : value;\n    setIonicClasses(this.el);\n  };\n  /**\n   * @param {?} el\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype.handleChangeEvent =\n  /**\n  * @param {?} el\n  * @param {?} value\n  * @return {?}\n  */\n  function (el, value) {\n    if (el === this.el.nativeElement) {\n      if (value !== this.lastValue) {\n        this.lastValue = value;\n        this.onChange(value);\n      }\n\n      setIonicClasses(this.el);\n    }\n  };\n  /**\n   * @param {?} el\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype._handleBlurEvent =\n  /**\n  * @param {?} el\n  * @return {?}\n  */\n  function (el) {\n    if (el === this.el.nativeElement) {\n      this.onTouched();\n      setIonicClasses(this.el);\n    }\n  };\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype.registerOnChange =\n  /**\n  * @param {?} fn\n  * @return {?}\n  */\n  function (fn) {\n    this.onChange = fn;\n  };\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype.registerOnTouched =\n  /**\n  * @param {?} fn\n  * @return {?}\n  */\n  function (fn) {\n    this.onTouched = fn;\n  };\n  /**\n   * @param {?} isDisabled\n   * @return {?}\n   */\n\n\n  ValueAccessor.prototype.setDisabledState =\n  /**\n  * @param {?} isDisabled\n  * @return {?}\n  */\n  function (isDisabled) {\n    this.el.nativeElement.disabled = isDisabled;\n  };\n\n  ValueAccessor.propDecorators = {\n    _handleBlurEvent: [{\n      type: HostListener,\n      args: ['ionBlur', ['$event.target']]\n    }]\n  };\n\n  ValueAccessor.ɵfac = function ValueAccessor_Factory(t) {\n    ɵngcc0.ɵɵinvalidFactory();\n  };\n\n  ValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ValueAccessor,\n    hostBindings: function ValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"ionBlur\", function ValueAccessor_ionBlur_HostBindingHandler($event) {\n          return ctx._handleBlurEvent($event.target);\n        });\n      }\n    }\n  });\n  return ValueAccessor;\n}();\n/** @type {?} */\n\n\nvar setIonicClasses =\n/**\n* @param {?} element\n* @return {?}\n*/\nfunction setIonicClasses(element) {\n  raf(\n  /**\n  * @return {?}\n  */\n  function () {\n    /** @type {?} */\n    var input =\n    /** @type {?} */\n    element.nativeElement;\n    /** @type {?} */\n\n    var classes = getClasses(input);\n    setClasses(input, classes);\n    /** @type {?} */\n\n    var item = input.closest('ion-item');\n\n    if (item) {\n      setClasses(item, classes);\n    }\n  });\n};\n/** @type {?} */\n\n\nvar getClasses =\n/**\n* @param {?} element\n* @return {?}\n*/\nfunction getClasses(element) {\n  /** @type {?} */\n  var classList = element.classList;\n  /** @type {?} */\n\n  var classes = [];\n\n  for (var i = 0; i < classList.length; i++) {\n    /** @type {?} */\n    var item = classList.item(i);\n\n    if (item !== null && startsWith(item, 'ng-')) {\n      classes.push(\"ion-\" + item.substr(3));\n    }\n  }\n\n  return classes;\n};\n/** @type {?} */\n\n\nvar setClasses =\n/**\n* @param {?} element\n* @param {?} classes\n* @return {?}\n*/\nfunction setClasses(element, classes) {\n  /** @type {?} */\n  var classList = element.classList;\n  ['ion-valid', 'ion-invalid', 'ion-touched', 'ion-untouched', 'ion-dirty', 'ion-pristine'].forEach(\n  /**\n  * @param {?} c\n  * @return {?}\n  */\n  function (c) {\n    return classList.remove(c);\n  });\n  classes.forEach(\n  /**\n  * @param {?} c\n  * @return {?}\n  */\n  function (c) {\n    return classList.add(c);\n  });\n};\n/** @type {?} */\n\n\nvar startsWith =\n/**\n* @param {?} input\n* @param {?} search\n* @return {?}\n*/\nfunction startsWith(input, search) {\n  return input.substr(0, search.length) === search;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar BooleanValueAccessor =\n/** @class */\nfunction (_super) {\n  __extends(BooleanValueAccessor, _super);\n\n  function BooleanValueAccessor(el) {\n    return _super.call(this, el) || this;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  BooleanValueAccessor.prototype.writeValue =\n  /**\n  * @param {?} value\n  * @return {?}\n  */\n  function (value) {\n    this.el.nativeElement.checked = this.lastValue = value == null ? false : value;\n    setIonicClasses(this.el);\n  };\n  /**\n   * @param {?} el\n   * @return {?}\n   */\n\n\n  BooleanValueAccessor.prototype._handleIonChange =\n  /**\n  * @param {?} el\n  * @return {?}\n  */\n  function (el) {\n    this.handleChangeEvent(el, el.checked);\n  };\n  /** @nocollapse */\n\n\n  BooleanValueAccessor.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  BooleanValueAccessor.propDecorators = {\n    _handleIonChange: [{\n      type: HostListener,\n      args: ['ionChange', ['$event.target']]\n    }]\n  };\n\n  BooleanValueAccessor.ɵfac = function BooleanValueAccessor_Factory(t) {\n    return new (t || BooleanValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  BooleanValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BooleanValueAccessor,\n    selectors: [[\"ion-checkbox\"], [\"ion-toggle\"]],\n    hostBindings: function BooleanValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"ionChange\", function BooleanValueAccessor_ionChange_HostBindingHandler($event) {\n          return ctx._handleIonChange($event.target);\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: BooleanValueAccessor,\n      multi: true\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return BooleanValueAccessor;\n}(ValueAccessor);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NumericValueAccessor =\n/** @class */\nfunction (_super) {\n  __extends(NumericValueAccessor, _super);\n\n  function NumericValueAccessor(el) {\n    return _super.call(this, el) || this;\n  }\n  /**\n   * @param {?} el\n   * @return {?}\n   */\n\n\n  NumericValueAccessor.prototype._handleIonChange =\n  /**\n  * @param {?} el\n  * @return {?}\n  */\n  function (el) {\n    this.handleChangeEvent(el, el.value);\n  };\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n\n\n  NumericValueAccessor.prototype.registerOnChange =\n  /**\n  * @param {?} fn\n  * @return {?}\n  */\n  function (fn) {\n    _super.prototype.registerOnChange.call(this,\n    /**\n    * @param {?} value\n    * @return {?}\n    */\n    function (value) {\n      fn(value === '' ? null : parseFloat(value));\n    });\n  };\n  /** @nocollapse */\n\n\n  NumericValueAccessor.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  NumericValueAccessor.propDecorators = {\n    _handleIonChange: [{\n      type: HostListener,\n      args: ['ionChange', ['$event.target']]\n    }]\n  };\n\n  NumericValueAccessor.ɵfac = function NumericValueAccessor_Factory(t) {\n    return new (t || NumericValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NumericValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NumericValueAccessor,\n    selectors: [[\"ion-input\", \"type\", \"number\"]],\n    hostBindings: function NumericValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"ionChange\", function NumericValueAccessor_ionChange_HostBindingHandler($event) {\n          return ctx._handleIonChange($event.target);\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: NumericValueAccessor,\n      multi: true\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return NumericValueAccessor;\n}(ValueAccessor);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar RadioValueAccessor =\n/** @class */\nfunction (_super) {\n  __extends(RadioValueAccessor, _super);\n\n  function RadioValueAccessor(el) {\n    return _super.call(this, el) || this;\n  }\n  /**\n   * @param {?} el\n   * @return {?}\n   */\n\n\n  RadioValueAccessor.prototype._handleIonSelect =\n  /**\n  * @param {?} el\n  * @return {?}\n  */\n  function (el) {\n    this.handleChangeEvent(el, el.checked);\n  };\n  /** @nocollapse */\n\n\n  RadioValueAccessor.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  RadioValueAccessor.propDecorators = {\n    _handleIonSelect: [{\n      type: HostListener,\n      args: ['ionSelect', ['$event.target']]\n    }]\n  };\n\n  RadioValueAccessor.ɵfac = function RadioValueAccessor_Factory(t) {\n    return new (t || RadioValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  RadioValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: RadioValueAccessor,\n    selectors: [[\"ion-radio\"]],\n    hostBindings: function RadioValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"ionSelect\", function RadioValueAccessor_ionSelect_HostBindingHandler($event) {\n          return ctx._handleIonSelect($event.target);\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RadioValueAccessor,\n      multi: true\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return RadioValueAccessor;\n}(ValueAccessor);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar SelectValueAccessor =\n/** @class */\nfunction (_super) {\n  __extends(SelectValueAccessor, _super);\n\n  function SelectValueAccessor(el) {\n    return _super.call(this, el) || this;\n  }\n  /**\n   * @param {?} el\n   * @return {?}\n   */\n\n\n  SelectValueAccessor.prototype._handleChangeEvent =\n  /**\n  * @param {?} el\n  * @return {?}\n  */\n  function (el) {\n    this.handleChangeEvent(el, el.value);\n  };\n  /** @nocollapse */\n\n\n  SelectValueAccessor.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  SelectValueAccessor.propDecorators = {\n    _handleChangeEvent: [{\n      type: HostListener,\n      args: ['ionChange', ['$event.target']]\n    }]\n  };\n\n  SelectValueAccessor.ɵfac = function SelectValueAccessor_Factory(t) {\n    return new (t || SelectValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  SelectValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: SelectValueAccessor,\n    selectors: [[\"ion-range\"], [\"ion-select\"], [\"ion-radio-group\"], [\"ion-segment\"], [\"ion-datetime\"]],\n    hostBindings: function SelectValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"ionChange\", function SelectValueAccessor_ionChange_HostBindingHandler($event) {\n          return ctx._handleChangeEvent($event.target);\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: SelectValueAccessor,\n      multi: true\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return SelectValueAccessor;\n}(ValueAccessor);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar TextValueAccessor =\n/** @class */\nfunction (_super) {\n  __extends(TextValueAccessor, _super);\n\n  function TextValueAccessor(el) {\n    return _super.call(this, el) || this;\n  }\n  /**\n   * @param {?} el\n   * @return {?}\n   */\n\n\n  TextValueAccessor.prototype._handleInputEvent =\n  /**\n  * @param {?} el\n  * @return {?}\n  */\n  function (el) {\n    this.handleChangeEvent(el, el.value);\n  };\n  /** @nocollapse */\n\n\n  TextValueAccessor.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  TextValueAccessor.propDecorators = {\n    _handleInputEvent: [{\n      type: HostListener,\n      args: ['ionChange', ['$event.target']]\n    }]\n  };\n\n  TextValueAccessor.ɵfac = function TextValueAccessor_Factory(t) {\n    return new (t || TextValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  TextValueAccessor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TextValueAccessor,\n    selectors: [[\"ion-input\", 3, \"type\", \"number\"], [\"ion-textarea\"], [\"ion-searchbar\"]],\n    hostBindings: function TextValueAccessor_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"ionChange\", function TextValueAccessor_ionChange_HostBindingHandler($event) {\n          return ctx._handleInputEvent($event.target);\n        });\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: TextValueAccessor,\n      multi: true\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return TextValueAccessor;\n}(ValueAccessor);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar Platform =\n/** @class */\nfunction () {\n  function Platform(doc, zone) {\n    var _this = this;\n\n    this.doc = doc;\n    /**\n     * @hidden\n     */\n\n    this.backButton =\n    /** @type {?} */\n    new Subject();\n    /**\n     * The pause event emits when the native platform puts the application\n     * into the background, typically when the user switches to a different\n     * application. This event would emit when a Cordova app is put into\n     * the background, however, it would not fire on a standard web browser.\n     */\n\n    this.pause = new Subject();\n    /**\n     * The resume event emits when the native platform pulls the application\n     * out from the background. This event would emit when a Cordova app comes\n     * out from the background, however, it would not fire on a standard web browser.\n     */\n\n    this.resume = new Subject();\n    /**\n     * The resize event emits when the browser window has changed dimensions. This\n     * could be from a browser window being physically resized, or from a device\n     * changing orientation.\n     */\n\n    this.resize = new Subject();\n    zone.run(\n    /**\n    * @return {?}\n    */\n    function () {\n      _this.win = doc.defaultView;\n\n      _this.backButton.subscribeWithPriority =\n      /**\n      * @param {?} priority\n      * @param {?} callback\n      * @return {?}\n      */\n      function (priority, callback) {\n        return this.subscribe(\n        /**\n        * @param {?} ev\n        * @return {?}\n        */\n        function (ev) {\n          return ev.register(priority,\n          /**\n          * @return {?}\n          */\n          function () {\n            return zone.run(callback);\n          });\n        });\n      };\n\n      proxyEvent(_this.pause, doc, 'pause');\n      proxyEvent(_this.resume, doc, 'resume');\n      proxyEvent(_this.backButton, doc, 'ionBackButton');\n      proxyEvent(_this.resize, _this.win, 'resize');\n      /** @type {?} */\n\n      var readyResolve;\n      _this._readyPromise = new Promise(\n      /**\n      * @param {?} res\n      * @return {?}\n      */\n      function (res) {\n        readyResolve = res;\n      });\n\n      if (_this.win && _this.win['cordova']) {\n        doc.addEventListener('deviceready',\n        /**\n        * @return {?}\n        */\n        function () {\n          readyResolve('cordova');\n        }, {\n          once: true\n        });\n      } else {\n        /** @type {?} */\n        readyResolve('dom');\n      }\n    });\n  }\n  /**\n   * @returns returns true/false based on platform.\n   * @description\n   * Depending on the platform the user is on, `is(platformName)` will\n   * return `true` or `false`. Note that the same app can return `true`\n   * for more than one platform name. For example, an app running from\n   * an iPad would return `true` for the platform names: `mobile`,\n   * `ios`, `ipad`, and `tablet`. Additionally, if the app was running\n   * from Cordova then `cordova` would be true, and if it was running\n   * from a web browser on the iPad then `mobileweb` would be `true`.\n   *\n   * ```\n   * import { Platform } from 'ionic-angular';\n   *\n   * @Component({...})\n   * export MyPage {\n   *   constructor(public platform: Platform) {\n   *     if (this.platform.is('ios')) {\n   *       // This will only print when on iOS\n   *       console.log('I am an iOS device!');\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * | Platform Name   | Description                        |\n   * |-----------------|------------------------------------|\n   * | android         | on a device running Android.       |\n   * | cordova         | on a device running Cordova.       |\n   * | ios             | on a device running iOS.           |\n   * | ipad            | on an iPad device.                 |\n   * | iphone          | on an iPhone device.               |\n   * | phablet         | on a phablet device.               |\n   * | tablet          | on a tablet device.                |\n   * | electron        | in Electron on a desktop device.   |\n   * | pwa             | as a PWA app.                      |\n   * | mobile          | on a mobile device.                |\n   * | mobileweb       | on a mobile device in a browser.   |\n   * | desktop         | on a desktop device.               |\n   * | hybrid          | is a cordova or capacitor app.     |\n   *\n   */\n\n  /**\n   * \\@description\n   * Depending on the platform the user is on, `is(platformName)` will\n   * return `true` or `false`. Note that the same app can return `true`\n   * for more than one platform name. For example, an app running from\n   * an iPad would return `true` for the platform names: `mobile`,\n   * `ios`, `ipad`, and `tablet`. Additionally, if the app was running\n   * from Cordova then `cordova` would be true, and if it was running\n   * from a web browser on the iPad then `mobileweb` would be `true`.\n   *\n   * ```\n   * import { Platform } from 'ionic-angular';\n   *\n   * \\@Component({...})\n   * export MyPage {\n   *   constructor(public platform: Platform) {\n   *     if (this.platform.is('ios')) {\n   *       // This will only print when on iOS\n   *       console.log('I am an iOS device!');\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * | Platform Name   | Description                        |\n   * |-----------------|------------------------------------|\n   * | android         | on a device running Android.       |\n   * | cordova         | on a device running Cordova.       |\n   * | ios             | on a device running iOS.           |\n   * | ipad            | on an iPad device.                 |\n   * | iphone          | on an iPhone device.               |\n   * | phablet         | on a phablet device.               |\n   * | tablet          | on a tablet device.                |\n   * | electron        | in Electron on a desktop device.   |\n   * | pwa             | as a PWA app.                      |\n   * | mobile          | on a mobile device.                |\n   * | mobileweb       | on a mobile device in a browser.   |\n   * | desktop         | on a desktop device.               |\n   * | hybrid          | is a cordova or capacitor app.     |\n   *\n   * @param {?} platformName\n   * @return {?} returns true/false based on platform.\n   */\n\n\n  Platform.prototype.is =\n  /**\n  * \\@description\n  * Depending on the platform the user is on, `is(platformName)` will\n  * return `true` or `false`. Note that the same app can return `true`\n  * for more than one platform name. For example, an app running from\n  * an iPad would return `true` for the platform names: `mobile`,\n  * `ios`, `ipad`, and `tablet`. Additionally, if the app was running\n  * from Cordova then `cordova` would be true, and if it was running\n  * from a web browser on the iPad then `mobileweb` would be `true`.\n  *\n  * ```\n  * import { Platform } from 'ionic-angular';\n  *\n  * \\@Component({...})\n  * export MyPage {\n  *   constructor(public platform: Platform) {\n  *     if (this.platform.is('ios')) {\n  *       // This will only print when on iOS\n  *       console.log('I am an iOS device!');\n  *     }\n  *   }\n  * }\n  * ```\n  *\n  * | Platform Name   | Description                        |\n  * |-----------------|------------------------------------|\n  * | android         | on a device running Android.       |\n  * | cordova         | on a device running Cordova.       |\n  * | ios             | on a device running iOS.           |\n  * | ipad            | on an iPad device.                 |\n  * | iphone          | on an iPhone device.               |\n  * | phablet         | on a phablet device.               |\n  * | tablet          | on a tablet device.                |\n  * | electron        | in Electron on a desktop device.   |\n  * | pwa             | as a PWA app.                      |\n  * | mobile          | on a mobile device.                |\n  * | mobileweb       | on a mobile device in a browser.   |\n  * | desktop         | on a desktop device.               |\n  * | hybrid          | is a cordova or capacitor app.     |\n  *\n  * @param {?} platformName\n  * @return {?} returns true/false based on platform.\n  */\n  function (platformName) {\n    return isPlatform(this.win, platformName);\n  };\n  /**\n   * @returns the array of platforms\n   * @description\n   * Depending on what device you are on, `platforms` can return multiple values.\n   * Each possible value is a hierarchy of platforms. For example, on an iPhone,\n   * it would return `mobile`, `ios`, and `iphone`.\n   *\n   * ```\n   * import { Platform } from 'ionic-angular';\n   *\n   * @Component({...})\n   * export MyPage {\n   *   constructor(public platform: Platform) {\n   *     // This will print an array of the current platforms\n   *     console.log(this.platform.platforms());\n   *   }\n   * }\n   * ```\n   */\n\n  /**\n   * \\@description\n   * Depending on what device you are on, `platforms` can return multiple values.\n   * Each possible value is a hierarchy of platforms. For example, on an iPhone,\n   * it would return `mobile`, `ios`, and `iphone`.\n   *\n   * ```\n   * import { Platform } from 'ionic-angular';\n   *\n   * \\@Component({...})\n   * export MyPage {\n   *   constructor(public platform: Platform) {\n   *     // This will print an array of the current platforms\n   *     console.log(this.platform.platforms());\n   *   }\n   * }\n   * ```\n   * @return {?} the array of platforms\n   */\n\n\n  Platform.prototype.platforms =\n  /**\n  * \\@description\n  * Depending on what device you are on, `platforms` can return multiple values.\n  * Each possible value is a hierarchy of platforms. For example, on an iPhone,\n  * it would return `mobile`, `ios`, and `iphone`.\n  *\n  * ```\n  * import { Platform } from 'ionic-angular';\n  *\n  * \\@Component({...})\n  * export MyPage {\n  *   constructor(public platform: Platform) {\n  *     // This will print an array of the current platforms\n  *     console.log(this.platform.platforms());\n  *   }\n  * }\n  * ```\n  * @return {?} the array of platforms\n  */\n  function () {\n    return getPlatforms(this.win);\n  };\n  /**\n   * Returns a promise when the platform is ready and native functionality\n   * can be called. If the app is running from within a web browser, then\n   * the promise will resolve when the DOM is ready. When the app is running\n   * from an application engine such as Cordova, then the promise will\n   * resolve when Cordova triggers the `deviceready` event.\n   *\n   * The resolved value is the `readySource`, which states which platform\n   * ready was used. For example, when Cordova is ready, the resolved ready\n   * source is `cordova`. The default ready source value will be `dom`. The\n   * `readySource` is useful if different logic should run depending on the\n   * platform the app is running from. For example, only Cordova can execute\n   * the status bar plugin, so the web should not run status bar plugin logic.\n   *\n   * ```\n   * import { Component } from '@angular/core';\n   * import { Platform } from 'ionic-angular';\n   *\n   * @Component({...})\n   * export MyApp {\n   *   constructor(public platform: Platform) {\n   *     this.platform.ready().then((readySource) => {\n   *       console.log('Platform ready from', readySource);\n   *       // Platform now ready, execute any required native code\n   *     });\n   *   }\n   * }\n   * ```\n   */\n\n  /**\n   * Returns a promise when the platform is ready and native functionality\n   * can be called. If the app is running from within a web browser, then\n   * the promise will resolve when the DOM is ready. When the app is running\n   * from an application engine such as Cordova, then the promise will\n   * resolve when Cordova triggers the `deviceready` event.\n   *\n   * The resolved value is the `readySource`, which states which platform\n   * ready was used. For example, when Cordova is ready, the resolved ready\n   * source is `cordova`. The default ready source value will be `dom`. The\n   * `readySource` is useful if different logic should run depending on the\n   * platform the app is running from. For example, only Cordova can execute\n   * the status bar plugin, so the web should not run status bar plugin logic.\n   *\n   * ```\n   * import { Component } from '\\@angular/core';\n   * import { Platform } from 'ionic-angular';\n   *\n   * \\@Component({...})\n   * export MyApp {\n   *   constructor(public platform: Platform) {\n   *     this.platform.ready().then((readySource) => {\n   *       console.log('Platform ready from', readySource);\n   *       // Platform now ready, execute any required native code\n   *     });\n   *   }\n   * }\n   * ```\n   * @return {?}\n   */\n\n\n  Platform.prototype.ready =\n  /**\n  * Returns a promise when the platform is ready and native functionality\n  * can be called. If the app is running from within a web browser, then\n  * the promise will resolve when the DOM is ready. When the app is running\n  * from an application engine such as Cordova, then the promise will\n  * resolve when Cordova triggers the `deviceready` event.\n  *\n  * The resolved value is the `readySource`, which states which platform\n  * ready was used. For example, when Cordova is ready, the resolved ready\n  * source is `cordova`. The default ready source value will be `dom`. The\n  * `readySource` is useful if different logic should run depending on the\n  * platform the app is running from. For example, only Cordova can execute\n  * the status bar plugin, so the web should not run status bar plugin logic.\n  *\n  * ```\n  * import { Component } from '\\@angular/core';\n  * import { Platform } from 'ionic-angular';\n  *\n  * \\@Component({...})\n  * export MyApp {\n  *   constructor(public platform: Platform) {\n  *     this.platform.ready().then((readySource) => {\n  *       console.log('Platform ready from', readySource);\n  *       // Platform now ready, execute any required native code\n  *     });\n  *   }\n  * }\n  * ```\n  * @return {?}\n  */\n  function () {\n    return this._readyPromise;\n  };\n\n  Object.defineProperty(Platform.prototype, \"isRTL\", {\n    /**\n     * Returns if this app is using right-to-left language direction or not.\n     * We recommend the app's `index.html` file already has the correct `dir`\n     * attribute value set, such as `<html dir=\"ltr\">` or `<html dir=\"rtl\">`.\n     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)\n     */\n    get:\n    /**\n    * Returns if this app is using right-to-left language direction or not.\n    * We recommend the app's `index.html` file already has the correct `dir`\n    * attribute value set, such as `<html dir=\"ltr\">` or `<html dir=\"rtl\">`.\n    * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)\n    * @return {?}\n    */\n    function get() {\n      return this.doc.dir === 'rtl';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Get the query string parameter\n   */\n\n  /**\n   * Get the query string parameter\n   * @param {?} key\n   * @return {?}\n   */\n\n  Platform.prototype.getQueryParam =\n  /**\n  * Get the query string parameter\n  * @param {?} key\n  * @return {?}\n  */\n  function (key) {\n    return readQueryParam(this.win.location.href, key);\n  };\n  /**\n   * Returns `true` if the app is in landscape mode.\n   */\n\n  /**\n   * Returns `true` if the app is in landscape mode.\n   * @return {?}\n   */\n\n\n  Platform.prototype.isLandscape =\n  /**\n  * Returns `true` if the app is in landscape mode.\n  * @return {?}\n  */\n  function () {\n    return !this.isPortrait();\n  };\n  /**\n   * Returns `true` if the app is in portait mode.\n   */\n\n  /**\n   * Returns `true` if the app is in portait mode.\n   * @return {?}\n   */\n\n\n  Platform.prototype.isPortrait =\n  /**\n  * Returns `true` if the app is in portait mode.\n  * @return {?}\n  */\n  function () {\n    return this.win.matchMedia && this.win.matchMedia('(orientation: portrait)').matches;\n  };\n  /**\n   * @param {?} expression\n   * @return {?}\n   */\n\n\n  Platform.prototype.testUserAgent =\n  /**\n  * @param {?} expression\n  * @return {?}\n  */\n  function (expression) {\n    /** @type {?} */\n    var nav = this.win.navigator;\n    return !!(nav && nav.userAgent && nav.userAgent.indexOf(expression) >= 0);\n  };\n  /**\n   * Get the current url.\n   */\n\n  /**\n   * Get the current url.\n   * @return {?}\n   */\n\n\n  Platform.prototype.url =\n  /**\n  * Get the current url.\n  * @return {?}\n  */\n  function () {\n    return this.win.location.href;\n  };\n  /**\n   * Gets the width of the platform's viewport using `window.innerWidth`.\n   */\n\n  /**\n   * Gets the width of the platform's viewport using `window.innerWidth`.\n   * @return {?}\n   */\n\n\n  Platform.prototype.width =\n  /**\n  * Gets the width of the platform's viewport using `window.innerWidth`.\n  * @return {?}\n  */\n  function () {\n    return this.win.innerWidth;\n  };\n  /**\n   * Gets the height of the platform's viewport using `window.innerHeight`.\n   */\n\n  /**\n   * Gets the height of the platform's viewport using `window.innerHeight`.\n   * @return {?}\n   */\n\n\n  Platform.prototype.height =\n  /**\n  * Gets the height of the platform's viewport using `window.innerHeight`.\n  * @return {?}\n  */\n  function () {\n    return this.win.innerHeight;\n  };\n  /** @nocollapse */\n\n\n  Platform.ctorParameters = function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: NgZone\n    }];\n  };\n  /** @nocollapse */\n\n\n  Platform.ngInjectableDef = defineInjectable({\n    factory: function Platform_Factory() {\n      return new Platform(inject(DOCUMENT), inject(NgZone));\n    },\n    token: Platform,\n    providedIn: \"root\"\n  });\n\n  Platform.ɵfac = function Platform_Factory(t) {\n    return new (t || Platform)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  Platform.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Platform,\n    factory: function factory(t) {\n      return Platform.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return Platform;\n}();\n/** @type {?} */\n\n\nvar readQueryParam =\n/**\n* @param {?} url\n* @param {?} key\n* @return {?}\n*/\nfunction readQueryParam(url, key) {\n  key = key.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n  /** @type {?} */\n\n  var regex = new RegExp('[\\\\?&]' + key + '=([^&#]*)');\n  /** @type {?} */\n\n  var results = regex.exec(url);\n  return results ? decodeURIComponent(results[1].replace(/\\+/g, ' ')) : null;\n};\n/** @type {?} */\n\n\nvar proxyEvent =\n/**\n* @template T\n* @param {?} emitter\n* @param {?} el\n* @param {?} eventName\n* @return {?}\n*/\nfunction proxyEvent(emitter, el, eventName) {\n  if (\n  /** @type {?} */\n  el) {\n    el.addEventListener(eventName,\n    /**\n    * @param {?} ev\n    * @return {?}\n    */\n    function (ev) {\n      // ?? cordova might emit \"null\" events\n      emitter.next(ev != null ?\n      /** @type {?} */\n\n      /** @type {?} */\n      ev.detail : undefined);\n    });\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NavController =\n/** @class */\nfunction () {\n  function NavController(platform, location, serializer, router) {\n    var _this = this;\n\n    this.location = location;\n    this.serializer = serializer;\n    this.router = router;\n    this.direction = DEFAULT_DIRECTION;\n    this.animated = DEFAULT_ANIMATED;\n    this.guessDirection = 'forward';\n    this.lastNavId = -1; // Subscribe to router events to detect direction\n\n    if (router) {\n      router.events.subscribe(\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function (ev) {\n        if (ev instanceof NavigationStart) {\n          /** @type {?} */\n          var id = ev.restoredState ? ev.restoredState.navigationId : ev.id;\n          _this.guessDirection = id < _this.lastNavId ? 'back' : 'forward';\n          _this.guessAnimation = !ev.restoredState ? _this.guessDirection : undefined;\n          _this.lastNavId = _this.guessDirection === 'forward' ? ev.id : id;\n        }\n      });\n    } // Subscribe to backButton events\n\n\n    platform.backButton.subscribeWithPriority(0,\n    /**\n    * @return {?}\n    */\n    function () {\n      return _this.pop();\n    });\n  }\n  /**\n   * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n   * it's equivalent to calling `this.router.navigateByUrl()`, but it's explicit about the **direction** of the transition.\n   *\n   * Going **forward** means that a new page is going to be pushed to the stack of the outlet (ion-router-outlet),\n   * and that it will show a \"forward\" animation by default.\n   *\n   * Navigating forward can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n   *\n   * ```html\n   * <a routerLink=\"/path/to/page\" routerDirection=\"forward\">Link</a>\n   * ```\n   */\n\n  /**\n   * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n   * it's equivalent to calling `this.router.navigateByUrl()`, but it's explicit about the **direction** of the transition.\n   *\n   * Going **forward** means that a new page is going to be pushed to the stack of the outlet (ion-router-outlet),\n   * and that it will show a \"forward\" animation by default.\n   *\n   * Navigating forward can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n   *\n   * ```html\n   * <a routerLink=\"/path/to/page\" routerDirection=\"forward\">Link</a>\n   * ```\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  NavController.prototype.navigateForward =\n  /**\n  * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n  * it's equivalent to calling `this.router.navigateByUrl()`, but it's explicit about the **direction** of the transition.\n  *\n  * Going **forward** means that a new page is going to be pushed to the stack of the outlet (ion-router-outlet),\n  * and that it will show a \"forward\" animation by default.\n  *\n  * Navigating forward can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n  *\n  * ```html\n  * <a routerLink=\"/path/to/page\" routerDirection=\"forward\">Link</a>\n  * ```\n  * @param {?} url\n  * @param {?=} options\n  * @return {?}\n  */\n  function (url, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.setDirection('forward', options.animated, options.animationDirection);\n    return this.navigate(url, options);\n  };\n  /**\n   * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n   * it's equivalent to calling:\n   *\n   * ```ts\n   * this.navController.setDirection('back');\n   * this.router.navigateByUrl(path);\n   * ```\n   *\n   * Going **back** means that all the pages in the stack until the navigated page is found will be popped,\n   * and that it will show a \"back\" animation by default.\n   *\n   * Navigating back can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n   *\n   * ```html\n   * <a routerLink=\"/path/to/page\" routerDirection=\"back\">Link</a>\n   * ```\n   */\n\n  /**\n   * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n   * it's equivalent to calling:\n   *\n   * ```ts\n   * this.navController.setDirection('back');\n   * this.router.navigateByUrl(path);\n   * ```\n   *\n   * Going **back** means that all the pages in the stack until the navigated page is found will be popped,\n   * and that it will show a \"back\" animation by default.\n   *\n   * Navigating back can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n   *\n   * ```html\n   * <a routerLink=\"/path/to/page\" routerDirection=\"back\">Link</a>\n   * ```\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  NavController.prototype.navigateBack =\n  /**\n  * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n  * it's equivalent to calling:\n  *\n  * ```ts\n  * this.navController.setDirection('back');\n  * this.router.navigateByUrl(path);\n  * ```\n  *\n  * Going **back** means that all the pages in the stack until the navigated page is found will be popped,\n  * and that it will show a \"back\" animation by default.\n  *\n  * Navigating back can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n  *\n  * ```html\n  * <a routerLink=\"/path/to/page\" routerDirection=\"back\">Link</a>\n  * ```\n  * @param {?} url\n  * @param {?=} options\n  * @return {?}\n  */\n  function (url, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.setDirection('back', options.animated, options.animationDirection);\n    return this.navigate(url, options);\n  };\n  /**\n   * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n   * it's equivalent to calling:\n   *\n   * ```ts\n   * this.navController.setDirection('root');\n   * this.router.navigateByUrl(path);\n   * ```\n   *\n   * Going **root** means that all existing pages in the stack will be removed,\n   * and the navigated page will become the single page in the stack.\n   *\n   * Navigating root can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n   *\n   * ```html\n   * <a routerLink=\"/path/to/page\" routerDirection=\"root\">Link</a>\n   * ```\n   */\n\n  /**\n   * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n   * it's equivalent to calling:\n   *\n   * ```ts\n   * this.navController.setDirection('root');\n   * this.router.navigateByUrl(path);\n   * ```\n   *\n   * Going **root** means that all existing pages in the stack will be removed,\n   * and the navigated page will become the single page in the stack.\n   *\n   * Navigating root can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n   *\n   * ```html\n   * <a routerLink=\"/path/to/page\" routerDirection=\"root\">Link</a>\n   * ```\n   * @param {?} url\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  NavController.prototype.navigateRoot =\n  /**\n  * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\n  * it's equivalent to calling:\n  *\n  * ```ts\n  * this.navController.setDirection('root');\n  * this.router.navigateByUrl(path);\n  * ```\n  *\n  * Going **root** means that all existing pages in the stack will be removed,\n  * and the navigated page will become the single page in the stack.\n  *\n  * Navigating root can also be triggered in a declarative manner by using the `[routerDirection]` directive:\n  *\n  * ```html\n  * <a routerLink=\"/path/to/page\" routerDirection=\"root\">Link</a>\n  * ```\n  * @param {?} url\n  * @param {?=} options\n  * @return {?}\n  */\n  function (url, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.setDirection('root', options.animated, options.animationDirection);\n    return this.navigate(url, options);\n  };\n  /**\n   * Same as [Location](https://angular.io/api/common/Location)'s back() method.\n   * It will use the standard `window.history.back()` under the hood, but featuring a `back` animation\n   * by default.\n   */\n\n  /**\n   * Same as [Location](https://angular.io/api/common/Location)'s back() method.\n   * It will use the standard `window.history.back()` under the hood, but featuring a `back` animation\n   * by default.\n   * @param {?=} options\n   * @return {?}\n   */\n\n\n  NavController.prototype.back =\n  /**\n  * Same as [Location](https://angular.io/api/common/Location)'s back() method.\n  * It will use the standard `window.history.back()` under the hood, but featuring a `back` animation\n  * by default.\n  * @param {?=} options\n  * @return {?}\n  */\n  function (options) {\n    if (options === void 0) {\n      options = {\n        animated: true,\n        animationDirection: 'back'\n      };\n    }\n\n    this.setDirection('back', options.animated, options.animationDirection);\n    return this.location.back();\n  };\n  /**\n   * This methods goes back in the context of Ionic's stack navigation.\n   *\n   * It recursively finds the top active `ion-router-outlet` and calls `pop()`.\n   * This is the recommended way to go back when you are using `ion-router-outlet`.\n   */\n\n  /**\n   * This methods goes back in the context of Ionic's stack navigation.\n   *\n   * It recursively finds the top active `ion-router-outlet` and calls `pop()`.\n   * This is the recommended way to go back when you are using `ion-router-outlet`.\n   * @return {?}\n   */\n\n\n  NavController.prototype.pop =\n  /**\n  * This methods goes back in the context of Ionic's stack navigation.\n  *\n  * It recursively finds the top active `ion-router-outlet` and calls `pop()`.\n  * This is the recommended way to go back when you are using `ion-router-outlet`.\n  * @return {?}\n  */\n  function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var outlet;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            outlet = this.topOutlet;\n            _a.label = 1;\n\n          case 1:\n            if (!outlet) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , outlet.pop()];\n\n          case 2:\n            if (_a.sent()) {\n              return [3\n              /*break*/\n              , 3];\n            } else {\n              outlet = outlet.parentOutlet;\n            }\n\n            return [3\n            /*break*/\n            , 1];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * This methods specifies the direction of the next navigation performed by the Angular router.\n   *\n   * `setDirection()` does not trigger any transition, it just sets some flags to be consumed by `ion-router-outlet`.\n   *\n   * It's recommended to use `navigateForward()`, `navigateBack()` and `navigateRoot()` instead of `setDirection()`.\n   */\n\n  /**\n   * This methods specifies the direction of the next navigation performed by the Angular router.\n   *\n   * `setDirection()` does not trigger any transition, it just sets some flags to be consumed by `ion-router-outlet`.\n   *\n   * It's recommended to use `navigateForward()`, `navigateBack()` and `navigateRoot()` instead of `setDirection()`.\n   * @param {?} direction\n   * @param {?=} animated\n   * @param {?=} animationDirection\n   * @return {?}\n   */\n\n\n  NavController.prototype.setDirection =\n  /**\n  * This methods specifies the direction of the next navigation performed by the Angular router.\n  *\n  * `setDirection()` does not trigger any transition, it just sets some flags to be consumed by `ion-router-outlet`.\n  *\n  * It's recommended to use `navigateForward()`, `navigateBack()` and `navigateRoot()` instead of `setDirection()`.\n  * @param {?} direction\n  * @param {?=} animated\n  * @param {?=} animationDirection\n  * @return {?}\n  */\n  function (direction, animated, animationDirection) {\n    this.direction = direction;\n    this.animated = getAnimation(direction, animated, animationDirection);\n  };\n  /**\n   * @internal\n   */\n\n  /**\n   * \\@internal\n   * @param {?} outlet\n   * @return {?}\n   */\n\n\n  NavController.prototype.setTopOutlet =\n  /**\n  * \\@internal\n  * @param {?} outlet\n  * @return {?}\n  */\n  function (outlet) {\n    this.topOutlet = outlet;\n  };\n  /**\n   * @internal\n   */\n\n  /**\n   * \\@internal\n   * @return {?}\n   */\n\n\n  NavController.prototype.consumeTransition =\n  /**\n  * \\@internal\n  * @return {?}\n  */\n  function () {\n    /** @type {?} */\n    var direction = 'root';\n    /** @type {?} */\n\n    var animation;\n\n    if (this.direction === 'auto') {\n      direction = this.guessDirection;\n      animation = this.guessAnimation;\n    } else {\n      animation = this.animated;\n      direction = this.direction;\n    }\n\n    this.direction = DEFAULT_DIRECTION;\n    this.animated = DEFAULT_ANIMATED;\n    return {\n      direction: direction,\n      animation: animation\n    };\n  };\n  /**\n   * @private\n   * @param {?} url\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  NavController.prototype.navigate =\n  /**\n  * @private\n  * @param {?} url\n  * @param {?} options\n  * @return {?}\n  */\n  function (url, options) {\n    if (Array.isArray(url)) {\n      return (\n        /** @type {?} */\n        this.router.navigate(url, options)\n      );\n    } else {\n      /**\n       * navigateByUrl ignores any properties that\n       * would change the url, so things like queryParams\n       * would be ignored unless we create a url tree\n       * More Info: https://github.com/angular/angular/issues/18798\n       * @type {?}\n       */\n      var urlTree = this.serializer.parse(url.toString());\n\n      if (options.queryParams !== undefined) {\n        urlTree.queryParams = __assign({}, options.queryParams);\n      }\n\n      if (options.fragment !== undefined) {\n        urlTree.fragment = options.fragment;\n      }\n      /**\n       * `navigateByUrl` will still apply `NavigationExtras` properties\n       * that do not modify the url, such as `replaceUrl` which is why\n       * `options` is passed in here.\n       */\n\n\n      return (\n        /** @type {?} */\n        this.router.navigateByUrl(urlTree, options)\n      );\n    }\n  };\n  /** @nocollapse */\n\n\n  NavController.ctorParameters = function () {\n    return [{\n      type: Platform\n    }, {\n      type: Location\n    }, {\n      type: UrlSerializer\n    }, {\n      type: Router,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  };\n  /** @nocollapse */\n\n\n  NavController.ngInjectableDef = defineInjectable({\n    factory: function NavController_Factory() {\n      return new NavController(inject(Platform), inject(Location), inject(UrlSerializer), inject(Router, 8));\n    },\n    token: NavController,\n    providedIn: \"root\"\n  });\n\n  NavController.ɵfac = function NavController_Factory(t) {\n    return new (t || NavController)(ɵngcc0.ɵɵinject(Platform), ɵngcc0.ɵɵinject(ɵngcc1.Location), ɵngcc0.ɵɵinject(ɵngcc2.UrlSerializer), ɵngcc0.ɵɵinject(ɵngcc2.Router, 8));\n  };\n\n  NavController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NavController,\n    factory: function factory(t) {\n      return NavController.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return NavController;\n}();\n/** @type {?} */\n\n\nvar getAnimation =\n/**\n* @param {?} direction\n* @param {?} animated\n* @param {?} animationDirection\n* @return {?}\n*/\nfunction getAnimation(direction, animated, animationDirection) {\n  if (animated === false) {\n    return undefined;\n  }\n\n  if (animationDirection !== undefined) {\n    return animationDirection;\n  }\n\n  if (direction === 'forward' || direction === 'back') {\n    return direction;\n  } else if (direction === 'root' && animated === true) {\n    return 'forward';\n  }\n\n  return undefined;\n};\n/** @type {?} */\n\n\nvar DEFAULT_DIRECTION = 'auto';\n/** @type {?} */\n\nvar DEFAULT_ANIMATED = undefined;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nvar proxyInputs =\n/**\n* @param {?} Cmp\n* @param {?} inputs\n* @return {?}\n*/\nfunction proxyInputs(Cmp, inputs) {\n  /** @type {?} */\n  var Prototype = Cmp.prototype;\n  inputs.forEach(\n  /**\n  * @param {?} item\n  * @return {?}\n  */\n  function (item) {\n    Object.defineProperty(Prototype, item, {\n      get:\n      /**\n      * @return {?}\n      */\n      function get() {\n        return this.el[item];\n      },\n      set:\n      /**\n      * @param {?} val\n      * @return {?}\n      */\n      function set(val) {\n        var _this = this;\n\n        this.z.runOutsideAngular(\n        /**\n        * @return {?}\n        */\n        function () {\n          return _this.el[item] = val;\n        });\n      }\n    });\n  });\n};\n/** @type {?} */\n\n\nvar proxyMethods =\n/**\n* @param {?} Cmp\n* @param {?} methods\n* @return {?}\n*/\nfunction proxyMethods(Cmp, methods) {\n  /** @type {?} */\n  var Prototype = Cmp.prototype;\n  methods.forEach(\n  /**\n  * @param {?} methodName\n  * @return {?}\n  */\n  function (methodName) {\n    Prototype[methodName] =\n    /**\n    * @return {?}\n    */\n    function () {\n      var _this = this;\n      /** @type {?} */\n\n\n      var args = arguments;\n      return this.z.runOutsideAngular(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this.el[methodName].apply(_this.el, args);\n      });\n    };\n  });\n};\n/** @type {?} */\n\n\nvar proxyOutputs =\n/**\n* @param {?} instance\n* @param {?} el\n* @param {?} events\n* @return {?}\n*/\nfunction proxyOutputs(instance, el, events) {\n  events.forEach(\n  /**\n  * @param {?} eventName\n  * @return {?}\n  */\n  function (eventName) {\n    return instance[eventName] = fromEvent(el, eventName);\n  });\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar IonApp =\n/** @class */\nfunction () {\n  function IonApp(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonApp.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonApp.ɵfac = function IonApp_Factory(t) {\n    return new (t || IonApp)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonApp.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonApp,\n    selectors: [[\"ion-app\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonApp_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonApp;\n}();\n\nvar IonAvatar =\n/** @class */\nfunction () {\n  function IonAvatar(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonAvatar.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonAvatar.ɵfac = function IonAvatar_Factory(t) {\n    return new (t || IonAvatar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonAvatar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonAvatar,\n    selectors: [[\"ion-avatar\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonAvatar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonAvatar;\n}();\n\nvar IonBackButton =\n/** @class */\nfunction () {\n  function IonBackButton(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonBackButton.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonBackButton.ɵfac = function IonBackButton_Factory(t) {\n    return new (t || IonBackButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonBackButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonBackButton,\n    selectors: [[\"ion-back-button\"]],\n    inputs: {\n      color: \"color\",\n      defaultHref: \"defaultHref\",\n      disabled: \"disabled\",\n      icon: \"icon\",\n      mode: \"mode\",\n      text: \"text\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonBackButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonBackButton;\n}();\n\nproxyInputs(IonBackButton, ['color', 'defaultHref', 'disabled', 'icon', 'mode', 'text', 'type']);\n\nvar IonBackdrop =\n/** @class */\nfunction () {\n  function IonBackdrop(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionBackdropTap']);\n  }\n  /** @nocollapse */\n\n\n  IonBackdrop.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonBackdrop.ɵfac = function IonBackdrop_Factory(t) {\n    return new (t || IonBackdrop)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonBackdrop.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonBackdrop,\n    selectors: [[\"ion-backdrop\"]],\n    inputs: {\n      stopPropagation: \"stopPropagation\",\n      tappable: \"tappable\",\n      visible: \"visible\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonBackdrop_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonBackdrop;\n}();\n\nproxyInputs(IonBackdrop, ['stopPropagation', 'tappable', 'visible']);\n\nvar IonBadge =\n/** @class */\nfunction () {\n  function IonBadge(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonBadge.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonBadge.ɵfac = function IonBadge_Factory(t) {\n    return new (t || IonBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonBadge.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonBadge,\n    selectors: [[\"ion-badge\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonBadge_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonBadge;\n}();\n\nproxyInputs(IonBadge, ['color', 'mode']);\n\nvar IonButton =\n/** @class */\nfunction () {\n  function IonButton(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionFocus', 'ionBlur']);\n  }\n  /** @nocollapse */\n\n\n  IonButton.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonButton.ɵfac = function IonButton_Factory(t) {\n    return new (t || IonButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonButton,\n    selectors: [[\"ion-button\"]],\n    inputs: {\n      buttonType: \"buttonType\",\n      color: \"color\",\n      disabled: \"disabled\",\n      download: \"download\",\n      expand: \"expand\",\n      fill: \"fill\",\n      href: \"href\",\n      mode: \"mode\",\n      rel: \"rel\",\n      routerDirection: \"routerDirection\",\n      shape: \"shape\",\n      size: \"size\",\n      strong: \"strong\",\n      target: \"target\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonButton;\n}();\n\nproxyInputs(IonButton, ['buttonType', 'color', 'disabled', 'download', 'expand', 'fill', 'href', 'mode', 'rel', 'routerDirection', 'shape', 'size', 'strong', 'target', 'type']);\n\nvar IonButtons =\n/** @class */\nfunction () {\n  function IonButtons(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonButtons.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonButtons.ɵfac = function IonButtons_Factory(t) {\n    return new (t || IonButtons)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonButtons.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonButtons,\n    selectors: [[\"ion-buttons\"]],\n    inputs: {\n      collapse: \"collapse\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonButtons_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonButtons;\n}();\n\nproxyInputs(IonButtons, ['collapse']);\n\nvar IonCard =\n/** @class */\nfunction () {\n  function IonCard(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonCard.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonCard.ɵfac = function IonCard_Factory(t) {\n    return new (t || IonCard)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonCard.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonCard,\n    selectors: [[\"ion-card\"]],\n    inputs: {\n      button: \"button\",\n      color: \"color\",\n      disabled: \"disabled\",\n      download: \"download\",\n      href: \"href\",\n      mode: \"mode\",\n      rel: \"rel\",\n      routerDirection: \"routerDirection\",\n      target: \"target\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonCard_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonCard;\n}();\n\nproxyInputs(IonCard, ['button', 'color', 'disabled', 'download', 'href', 'mode', 'rel', 'routerDirection', 'target', 'type']);\n\nvar IonCardContent =\n/** @class */\nfunction () {\n  function IonCardContent(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonCardContent.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonCardContent.ɵfac = function IonCardContent_Factory(t) {\n    return new (t || IonCardContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonCardContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonCardContent,\n    selectors: [[\"ion-card-content\"]],\n    inputs: {\n      mode: \"mode\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonCardContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonCardContent;\n}();\n\nproxyInputs(IonCardContent, ['mode']);\n\nvar IonCardHeader =\n/** @class */\nfunction () {\n  function IonCardHeader(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonCardHeader.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonCardHeader.ɵfac = function IonCardHeader_Factory(t) {\n    return new (t || IonCardHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonCardHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonCardHeader,\n    selectors: [[\"ion-card-header\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\",\n      translucent: \"translucent\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonCardHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonCardHeader;\n}();\n\nproxyInputs(IonCardHeader, ['color', 'mode', 'translucent']);\n\nvar IonCardSubtitle =\n/** @class */\nfunction () {\n  function IonCardSubtitle(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonCardSubtitle.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonCardSubtitle.ɵfac = function IonCardSubtitle_Factory(t) {\n    return new (t || IonCardSubtitle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonCardSubtitle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonCardSubtitle,\n    selectors: [[\"ion-card-subtitle\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonCardSubtitle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonCardSubtitle;\n}();\n\nproxyInputs(IonCardSubtitle, ['color', 'mode']);\n\nvar IonCardTitle =\n/** @class */\nfunction () {\n  function IonCardTitle(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonCardTitle.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonCardTitle.ɵfac = function IonCardTitle_Factory(t) {\n    return new (t || IonCardTitle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonCardTitle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonCardTitle,\n    selectors: [[\"ion-card-title\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonCardTitle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonCardTitle;\n}();\n\nproxyInputs(IonCardTitle, ['color', 'mode']);\n\nvar IonCheckbox =\n/** @class */\nfunction () {\n  function IonCheckbox(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionChange', 'ionFocus', 'ionBlur']);\n  }\n  /** @nocollapse */\n\n\n  IonCheckbox.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonCheckbox.ɵfac = function IonCheckbox_Factory(t) {\n    return new (t || IonCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonCheckbox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonCheckbox,\n    selectors: [[\"ion-checkbox\"]],\n    inputs: {\n      checked: \"checked\",\n      color: \"color\",\n      disabled: \"disabled\",\n      indeterminate: \"indeterminate\",\n      mode: \"mode\",\n      name: \"name\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonCheckbox;\n}();\n\nproxyInputs(IonCheckbox, ['checked', 'color', 'disabled', 'indeterminate', 'mode', 'name', 'value']);\n\nvar IonChip =\n/** @class */\nfunction () {\n  function IonChip(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonChip.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonChip.ɵfac = function IonChip_Factory(t) {\n    return new (t || IonChip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonChip.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonChip,\n    selectors: [[\"ion-chip\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\",\n      outline: \"outline\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonChip_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonChip;\n}();\n\nproxyInputs(IonChip, ['color', 'mode', 'outline']);\n\nvar IonCol =\n/** @class */\nfunction () {\n  function IonCol(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonCol.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonCol.ɵfac = function IonCol_Factory(t) {\n    return new (t || IonCol)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonCol.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonCol,\n    selectors: [[\"ion-col\"]],\n    inputs: {\n      offset: \"offset\",\n      offsetLg: \"offsetLg\",\n      offsetMd: \"offsetMd\",\n      offsetSm: \"offsetSm\",\n      offsetXl: \"offsetXl\",\n      offsetXs: \"offsetXs\",\n      pull: \"pull\",\n      pullLg: \"pullLg\",\n      pullMd: \"pullMd\",\n      pullSm: \"pullSm\",\n      pullXl: \"pullXl\",\n      pullXs: \"pullXs\",\n      push: \"push\",\n      pushLg: \"pushLg\",\n      pushMd: \"pushMd\",\n      pushSm: \"pushSm\",\n      pushXl: \"pushXl\",\n      pushXs: \"pushXs\",\n      size: \"size\",\n      sizeLg: \"sizeLg\",\n      sizeMd: \"sizeMd\",\n      sizeSm: \"sizeSm\",\n      sizeXl: \"sizeXl\",\n      sizeXs: \"sizeXs\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonCol_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonCol;\n}();\n\nproxyInputs(IonCol, ['offset', 'offsetLg', 'offsetMd', 'offsetSm', 'offsetXl', 'offsetXs', 'pull', 'pullLg', 'pullMd', 'pullSm', 'pullXl', 'pullXs', 'push', 'pushLg', 'pushMd', 'pushSm', 'pushXl', 'pushXs', 'size', 'sizeLg', 'sizeMd', 'sizeSm', 'sizeXl', 'sizeXs']);\n\nvar IonContent =\n/** @class */\nfunction () {\n  function IonContent(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionScrollStart', 'ionScroll', 'ionScrollEnd']);\n  }\n  /** @nocollapse */\n\n\n  IonContent.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonContent.ɵfac = function IonContent_Factory(t) {\n    return new (t || IonContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonContent,\n    selectors: [[\"ion-content\"]],\n    inputs: {\n      color: \"color\",\n      forceOverscroll: \"forceOverscroll\",\n      fullscreen: \"fullscreen\",\n      scrollEvents: \"scrollEvents\",\n      scrollX: \"scrollX\",\n      scrollY: \"scrollY\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonContent;\n}();\n\nproxyMethods(IonContent, ['getScrollElement', 'scrollToTop', 'scrollToBottom', 'scrollByPoint', 'scrollToPoint']);\nproxyInputs(IonContent, ['color', 'forceOverscroll', 'fullscreen', 'scrollEvents', 'scrollX', 'scrollY']);\n\nvar IonDatetime =\n/** @class */\nfunction () {\n  function IonDatetime(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionCancel', 'ionChange', 'ionFocus', 'ionBlur']);\n  }\n  /** @nocollapse */\n\n\n  IonDatetime.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonDatetime.ɵfac = function IonDatetime_Factory(t) {\n    return new (t || IonDatetime)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonDatetime.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonDatetime,\n    selectors: [[\"ion-datetime\"]],\n    inputs: {\n      cancelText: \"cancelText\",\n      dayNames: \"dayNames\",\n      dayShortNames: \"dayShortNames\",\n      dayValues: \"dayValues\",\n      disabled: \"disabled\",\n      displayFormat: \"displayFormat\",\n      doneText: \"doneText\",\n      hourValues: \"hourValues\",\n      max: \"max\",\n      min: \"min\",\n      minuteValues: \"minuteValues\",\n      mode: \"mode\",\n      monthNames: \"monthNames\",\n      monthShortNames: \"monthShortNames\",\n      monthValues: \"monthValues\",\n      name: \"name\",\n      pickerFormat: \"pickerFormat\",\n      pickerOptions: \"pickerOptions\",\n      placeholder: \"placeholder\",\n      readonly: \"readonly\",\n      value: \"value\",\n      yearValues: \"yearValues\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonDatetime_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonDatetime;\n}();\n\nproxyMethods(IonDatetime, ['open']);\nproxyInputs(IonDatetime, ['cancelText', 'dayNames', 'dayShortNames', 'dayValues', 'disabled', 'displayFormat', 'doneText', 'hourValues', 'max', 'min', 'minuteValues', 'mode', 'monthNames', 'monthShortNames', 'monthValues', 'name', 'pickerFormat', 'pickerOptions', 'placeholder', 'readonly', 'value', 'yearValues']);\n\nvar IonFab =\n/** @class */\nfunction () {\n  function IonFab(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonFab.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonFab.ɵfac = function IonFab_Factory(t) {\n    return new (t || IonFab)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonFab.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonFab,\n    selectors: [[\"ion-fab\"]],\n    inputs: {\n      activated: \"activated\",\n      edge: \"edge\",\n      horizontal: \"horizontal\",\n      vertical: \"vertical\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonFab_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonFab;\n}();\n\nproxyMethods(IonFab, ['close']);\nproxyInputs(IonFab, ['activated', 'edge', 'horizontal', 'vertical']);\n\nvar IonFabButton =\n/** @class */\nfunction () {\n  function IonFabButton(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionFocus', 'ionBlur']);\n  }\n  /** @nocollapse */\n\n\n  IonFabButton.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonFabButton.ɵfac = function IonFabButton_Factory(t) {\n    return new (t || IonFabButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonFabButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonFabButton,\n    selectors: [[\"ion-fab-button\"]],\n    inputs: {\n      activated: \"activated\",\n      color: \"color\",\n      disabled: \"disabled\",\n      download: \"download\",\n      href: \"href\",\n      mode: \"mode\",\n      rel: \"rel\",\n      routerDirection: \"routerDirection\",\n      show: \"show\",\n      size: \"size\",\n      target: \"target\",\n      translucent: \"translucent\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonFabButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonFabButton;\n}();\n\nproxyInputs(IonFabButton, ['activated', 'color', 'disabled', 'download', 'href', 'mode', 'rel', 'routerDirection', 'show', 'size', 'target', 'translucent', 'type']);\n\nvar IonFabList =\n/** @class */\nfunction () {\n  function IonFabList(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonFabList.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonFabList.ɵfac = function IonFabList_Factory(t) {\n    return new (t || IonFabList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonFabList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonFabList,\n    selectors: [[\"ion-fab-list\"]],\n    inputs: {\n      activated: \"activated\",\n      side: \"side\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonFabList_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonFabList;\n}();\n\nproxyInputs(IonFabList, ['activated', 'side']);\n\nvar IonFooter =\n/** @class */\nfunction () {\n  function IonFooter(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonFooter.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonFooter.ɵfac = function IonFooter_Factory(t) {\n    return new (t || IonFooter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonFooter.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonFooter,\n    selectors: [[\"ion-footer\"]],\n    inputs: {\n      mode: \"mode\",\n      translucent: \"translucent\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonFooter_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonFooter;\n}();\n\nproxyInputs(IonFooter, ['mode', 'translucent']);\n\nvar IonGrid =\n/** @class */\nfunction () {\n  function IonGrid(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonGrid.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonGrid.ɵfac = function IonGrid_Factory(t) {\n    return new (t || IonGrid)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonGrid.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonGrid,\n    selectors: [[\"ion-grid\"]],\n    inputs: {\n      fixed: \"fixed\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonGrid_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonGrid;\n}();\n\nproxyInputs(IonGrid, ['fixed']);\n\nvar IonHeader =\n/** @class */\nfunction () {\n  function IonHeader(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonHeader.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonHeader.ɵfac = function IonHeader_Factory(t) {\n    return new (t || IonHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonHeader,\n    selectors: [[\"ion-header\"]],\n    inputs: {\n      collapse: \"collapse\",\n      mode: \"mode\",\n      translucent: \"translucent\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonHeader;\n}();\n\nproxyInputs(IonHeader, ['collapse', 'mode', 'translucent']);\n\nvar IonIcon =\n/** @class */\nfunction () {\n  function IonIcon(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonIcon.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonIcon.ɵfac = function IonIcon_Factory(t) {\n    return new (t || IonIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonIcon.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonIcon,\n    selectors: [[\"ion-icon\"]],\n    inputs: {\n      ariaLabel: \"ariaLabel\",\n      color: \"color\",\n      flipRtl: \"flipRtl\",\n      icon: \"icon\",\n      ios: \"ios\",\n      lazy: \"lazy\",\n      md: \"md\",\n      mode: \"mode\",\n      name: \"name\",\n      size: \"size\",\n      src: \"src\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonIcon;\n}();\n\nproxyInputs(IonIcon, ['ariaLabel', 'color', 'flipRtl', 'icon', 'ios', 'lazy', 'md', 'mode', 'name', 'size', 'src']);\n\nvar IonImg =\n/** @class */\nfunction () {\n  function IonImg(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionImgWillLoad', 'ionImgDidLoad', 'ionError']);\n  }\n  /** @nocollapse */\n\n\n  IonImg.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonImg.ɵfac = function IonImg_Factory(t) {\n    return new (t || IonImg)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonImg.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonImg,\n    selectors: [[\"ion-img\"]],\n    inputs: {\n      alt: \"alt\",\n      src: \"src\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonImg_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonImg;\n}();\n\nproxyInputs(IonImg, ['alt', 'src']);\n\nvar IonInfiniteScroll =\n/** @class */\nfunction () {\n  function IonInfiniteScroll(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionInfinite']);\n  }\n  /** @nocollapse */\n\n\n  IonInfiniteScroll.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonInfiniteScroll.ɵfac = function IonInfiniteScroll_Factory(t) {\n    return new (t || IonInfiniteScroll)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonInfiniteScroll.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonInfiniteScroll,\n    selectors: [[\"ion-infinite-scroll\"]],\n    inputs: {\n      disabled: \"disabled\",\n      position: \"position\",\n      threshold: \"threshold\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonInfiniteScroll_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonInfiniteScroll;\n}();\n\nproxyMethods(IonInfiniteScroll, ['complete']);\nproxyInputs(IonInfiniteScroll, ['disabled', 'position', 'threshold']);\n\nvar IonInfiniteScrollContent =\n/** @class */\nfunction () {\n  function IonInfiniteScrollContent(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonInfiniteScrollContent.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonInfiniteScrollContent.ɵfac = function IonInfiniteScrollContent_Factory(t) {\n    return new (t || IonInfiniteScrollContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonInfiniteScrollContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonInfiniteScrollContent,\n    selectors: [[\"ion-infinite-scroll-content\"]],\n    inputs: {\n      loadingSpinner: \"loadingSpinner\",\n      loadingText: \"loadingText\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonInfiniteScrollContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonInfiniteScrollContent;\n}();\n\nproxyInputs(IonInfiniteScrollContent, ['loadingSpinner', 'loadingText']);\n\nvar IonInput =\n/** @class */\nfunction () {\n  function IonInput(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionInput', 'ionChange', 'ionBlur', 'ionFocus']);\n  }\n  /** @nocollapse */\n\n\n  IonInput.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonInput.ɵfac = function IonInput_Factory(t) {\n    return new (t || IonInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonInput.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonInput,\n    selectors: [[\"ion-input\"]],\n    inputs: {\n      accept: \"accept\",\n      autocapitalize: \"autocapitalize\",\n      autocomplete: \"autocomplete\",\n      autocorrect: \"autocorrect\",\n      autofocus: \"autofocus\",\n      clearInput: \"clearInput\",\n      clearOnEdit: \"clearOnEdit\",\n      color: \"color\",\n      debounce: \"debounce\",\n      disabled: \"disabled\",\n      inputmode: \"inputmode\",\n      max: \"max\",\n      maxlength: \"maxlength\",\n      min: \"min\",\n      minlength: \"minlength\",\n      mode: \"mode\",\n      multiple: \"multiple\",\n      name: \"name\",\n      pattern: \"pattern\",\n      placeholder: \"placeholder\",\n      readonly: \"readonly\",\n      required: \"required\",\n      size: \"size\",\n      spellcheck: \"spellcheck\",\n      step: \"step\",\n      type: \"type\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonInput_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonInput;\n}();\n\nproxyMethods(IonInput, ['setFocus', 'getInputElement']);\nproxyInputs(IonInput, ['accept', 'autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'clearInput', 'clearOnEdit', 'color', 'debounce', 'disabled', 'inputmode', 'max', 'maxlength', 'min', 'minlength', 'mode', 'multiple', 'name', 'pattern', 'placeholder', 'readonly', 'required', 'size', 'spellcheck', 'step', 'type', 'value']);\n\nvar IonItem =\n/** @class */\nfunction () {\n  function IonItem(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonItem.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonItem.ɵfac = function IonItem_Factory(t) {\n    return new (t || IonItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonItem,\n    selectors: [[\"ion-item\"]],\n    inputs: {\n      button: \"button\",\n      color: \"color\",\n      detail: \"detail\",\n      detailIcon: \"detailIcon\",\n      disabled: \"disabled\",\n      download: \"download\",\n      href: \"href\",\n      lines: \"lines\",\n      mode: \"mode\",\n      rel: \"rel\",\n      routerDirection: \"routerDirection\",\n      target: \"target\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonItem;\n}();\n\nproxyInputs(IonItem, ['button', 'color', 'detail', 'detailIcon', 'disabled', 'download', 'href', 'lines', 'mode', 'rel', 'routerDirection', 'target', 'type']);\n\nvar IonItemDivider =\n/** @class */\nfunction () {\n  function IonItemDivider(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonItemDivider.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonItemDivider.ɵfac = function IonItemDivider_Factory(t) {\n    return new (t || IonItemDivider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonItemDivider.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonItemDivider,\n    selectors: [[\"ion-item-divider\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\",\n      sticky: \"sticky\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonItemDivider_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonItemDivider;\n}();\n\nproxyInputs(IonItemDivider, ['color', 'mode', 'sticky']);\n\nvar IonItemGroup =\n/** @class */\nfunction () {\n  function IonItemGroup(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonItemGroup.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonItemGroup.ɵfac = function IonItemGroup_Factory(t) {\n    return new (t || IonItemGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonItemGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonItemGroup,\n    selectors: [[\"ion-item-group\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonItemGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonItemGroup;\n}();\n\nvar IonItemOption =\n/** @class */\nfunction () {\n  function IonItemOption(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonItemOption.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonItemOption.ɵfac = function IonItemOption_Factory(t) {\n    return new (t || IonItemOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonItemOption.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonItemOption,\n    selectors: [[\"ion-item-option\"]],\n    inputs: {\n      color: \"color\",\n      disabled: \"disabled\",\n      download: \"download\",\n      expandable: \"expandable\",\n      href: \"href\",\n      mode: \"mode\",\n      rel: \"rel\",\n      target: \"target\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonItemOption_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonItemOption;\n}();\n\nproxyInputs(IonItemOption, ['color', 'disabled', 'download', 'expandable', 'href', 'mode', 'rel', 'target', 'type']);\n\nvar IonItemOptions =\n/** @class */\nfunction () {\n  function IonItemOptions(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionSwipe']);\n  }\n  /** @nocollapse */\n\n\n  IonItemOptions.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonItemOptions.ɵfac = function IonItemOptions_Factory(t) {\n    return new (t || IonItemOptions)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonItemOptions.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonItemOptions,\n    selectors: [[\"ion-item-options\"]],\n    inputs: {\n      side: \"side\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonItemOptions_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonItemOptions;\n}();\n\nproxyInputs(IonItemOptions, ['side']);\n\nvar IonItemSliding =\n/** @class */\nfunction () {\n  function IonItemSliding(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionDrag']);\n  }\n  /** @nocollapse */\n\n\n  IonItemSliding.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonItemSliding.ɵfac = function IonItemSliding_Factory(t) {\n    return new (t || IonItemSliding)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonItemSliding.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonItemSliding,\n    selectors: [[\"ion-item-sliding\"]],\n    inputs: {\n      disabled: \"disabled\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonItemSliding_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonItemSliding;\n}();\n\nproxyMethods(IonItemSliding, ['getOpenAmount', 'getSlidingRatio', 'open', 'close', 'closeOpened']);\nproxyInputs(IonItemSliding, ['disabled']);\n\nvar IonLabel =\n/** @class */\nfunction () {\n  function IonLabel(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonLabel.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonLabel.ɵfac = function IonLabel_Factory(t) {\n    return new (t || IonLabel)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonLabel.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonLabel,\n    selectors: [[\"ion-label\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\",\n      position: \"position\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonLabel_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonLabel;\n}();\n\nproxyInputs(IonLabel, ['color', 'mode', 'position']);\n\nvar IonList =\n/** @class */\nfunction () {\n  function IonList(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonList.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonList.ɵfac = function IonList_Factory(t) {\n    return new (t || IonList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonList.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonList,\n    selectors: [[\"ion-list\"]],\n    inputs: {\n      inset: \"inset\",\n      lines: \"lines\",\n      mode: \"mode\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonList_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonList;\n}();\n\nproxyMethods(IonList, ['closeSlidingItems']);\nproxyInputs(IonList, ['inset', 'lines', 'mode']);\n\nvar IonListHeader =\n/** @class */\nfunction () {\n  function IonListHeader(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonListHeader.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonListHeader.ɵfac = function IonListHeader_Factory(t) {\n    return new (t || IonListHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonListHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonListHeader,\n    selectors: [[\"ion-list-header\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonListHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonListHeader;\n}();\n\nproxyInputs(IonListHeader, ['color', 'mode']);\n\nvar IonMenu =\n/** @class */\nfunction () {\n  function IonMenu(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionWillOpen', 'ionWillClose', 'ionDidOpen', 'ionDidClose']);\n  }\n  /** @nocollapse */\n\n\n  IonMenu.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonMenu.ɵfac = function IonMenu_Factory(t) {\n    return new (t || IonMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonMenu.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonMenu,\n    selectors: [[\"ion-menu\"]],\n    inputs: {\n      contentId: \"contentId\",\n      disabled: \"disabled\",\n      maxEdgeStart: \"maxEdgeStart\",\n      menuId: \"menuId\",\n      side: \"side\",\n      swipeGesture: \"swipeGesture\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonMenu_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonMenu;\n}();\n\nproxyMethods(IonMenu, ['isOpen', 'isActive', 'open', 'close', 'toggle', 'setOpen']);\nproxyInputs(IonMenu, ['contentId', 'disabled', 'maxEdgeStart', 'menuId', 'side', 'swipeGesture', 'type']);\n\nvar IonMenuButton =\n/** @class */\nfunction () {\n  function IonMenuButton(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonMenuButton.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonMenuButton.ɵfac = function IonMenuButton_Factory(t) {\n    return new (t || IonMenuButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonMenuButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonMenuButton,\n    selectors: [[\"ion-menu-button\"]],\n    inputs: {\n      autoHide: \"autoHide\",\n      color: \"color\",\n      disabled: \"disabled\",\n      menu: \"menu\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonMenuButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonMenuButton;\n}();\n\nproxyInputs(IonMenuButton, ['autoHide', 'color', 'disabled', 'menu', 'type']);\n\nvar IonMenuToggle =\n/** @class */\nfunction () {\n  function IonMenuToggle(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonMenuToggle.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonMenuToggle.ɵfac = function IonMenuToggle_Factory(t) {\n    return new (t || IonMenuToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonMenuToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonMenuToggle,\n    selectors: [[\"ion-menu-toggle\"]],\n    inputs: {\n      autoHide: \"autoHide\",\n      menu: \"menu\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonMenuToggle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonMenuToggle;\n}();\n\nproxyInputs(IonMenuToggle, ['autoHide', 'menu']);\n\nvar IonNav =\n/** @class */\nfunction () {\n  function IonNav(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionNavWillChange', 'ionNavDidChange']);\n  }\n  /** @nocollapse */\n\n\n  IonNav.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonNav.ɵfac = function IonNav_Factory(t) {\n    return new (t || IonNav)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonNav.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonNav,\n    selectors: [[\"ion-nav\"]],\n    inputs: {\n      animated: \"animated\",\n      animation: \"animation\",\n      root: \"root\",\n      rootParams: \"rootParams\",\n      swipeGesture: \"swipeGesture\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonNav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonNav;\n}();\n\nproxyMethods(IonNav, ['push', 'insert', 'insertPages', 'pop', 'popTo', 'popToRoot', 'removeIndex', 'setRoot', 'setPages', 'getActive', 'getByIndex', 'canGoBack', 'getPrevious']);\nproxyInputs(IonNav, ['animated', 'animation', 'root', 'rootParams', 'swipeGesture']);\n\nvar IonNavLink =\n/** @class */\nfunction () {\n  function IonNavLink(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonNavLink.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonNavLink.ɵfac = function IonNavLink_Factory(t) {\n    return new (t || IonNavLink)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonNavLink.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonNavLink,\n    selectors: [[\"ion-nav-link\"]],\n    inputs: {\n      component: \"component\",\n      componentProps: \"componentProps\",\n      routerDirection: \"routerDirection\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonNavLink_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonNavLink;\n}();\n\nproxyInputs(IonNavLink, ['component', 'componentProps', 'routerDirection']);\n\nvar IonNavPop =\n/** @class */\nfunction () {\n  function IonNavPop(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonNavPop.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonNavPop.ɵfac = function IonNavPop_Factory(t) {\n    return new (t || IonNavPop)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonNavPop.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonNavPop,\n    selectors: [[\"ion-nav-pop\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonNavPop_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonNavPop;\n}();\n\nvar IonNavPush =\n/** @class */\nfunction () {\n  function IonNavPush(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonNavPush.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonNavPush.ɵfac = function IonNavPush_Factory(t) {\n    return new (t || IonNavPush)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonNavPush.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonNavPush,\n    selectors: [[\"ion-nav-push\"]],\n    inputs: {\n      component: \"component\",\n      componentProps: \"componentProps\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonNavPush_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonNavPush;\n}();\n\nproxyInputs(IonNavPush, ['component', 'componentProps']);\n\nvar IonNavSetRoot =\n/** @class */\nfunction () {\n  function IonNavSetRoot(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonNavSetRoot.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonNavSetRoot.ɵfac = function IonNavSetRoot_Factory(t) {\n    return new (t || IonNavSetRoot)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonNavSetRoot.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonNavSetRoot,\n    selectors: [[\"ion-nav-set-root\"]],\n    inputs: {\n      component: \"component\",\n      componentProps: \"componentProps\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonNavSetRoot_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonNavSetRoot;\n}();\n\nproxyInputs(IonNavSetRoot, ['component', 'componentProps']);\n\nvar IonNote =\n/** @class */\nfunction () {\n  function IonNote(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonNote.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonNote.ɵfac = function IonNote_Factory(t) {\n    return new (t || IonNote)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonNote.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonNote,\n    selectors: [[\"ion-note\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonNote_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonNote;\n}();\n\nproxyInputs(IonNote, ['color', 'mode']);\n\nvar IonProgressBar =\n/** @class */\nfunction () {\n  function IonProgressBar(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonProgressBar.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonProgressBar.ɵfac = function IonProgressBar_Factory(t) {\n    return new (t || IonProgressBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonProgressBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonProgressBar,\n    selectors: [[\"ion-progress-bar\"]],\n    inputs: {\n      buffer: \"buffer\",\n      color: \"color\",\n      mode: \"mode\",\n      reversed: \"reversed\",\n      type: \"type\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonProgressBar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonProgressBar;\n}();\n\nproxyInputs(IonProgressBar, ['buffer', 'color', 'mode', 'reversed', 'type', 'value']);\n\nvar IonRadio =\n/** @class */\nfunction () {\n  function IonRadio(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionSelect', 'ionFocus', 'ionBlur']);\n  }\n  /** @nocollapse */\n\n\n  IonRadio.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonRadio.ɵfac = function IonRadio_Factory(t) {\n    return new (t || IonRadio)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonRadio.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonRadio,\n    selectors: [[\"ion-radio\"]],\n    inputs: {\n      checked: \"checked\",\n      color: \"color\",\n      disabled: \"disabled\",\n      mode: \"mode\",\n      name: \"name\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonRadio_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonRadio;\n}();\n\nproxyInputs(IonRadio, ['checked', 'color', 'disabled', 'mode', 'name', 'value']);\n\nvar IonRadioGroup =\n/** @class */\nfunction () {\n  function IonRadioGroup(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionChange']);\n  }\n  /** @nocollapse */\n\n\n  IonRadioGroup.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonRadioGroup.ɵfac = function IonRadioGroup_Factory(t) {\n    return new (t || IonRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonRadioGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonRadioGroup,\n    selectors: [[\"ion-radio-group\"]],\n    inputs: {\n      allowEmptySelection: \"allowEmptySelection\",\n      name: \"name\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonRadioGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonRadioGroup;\n}();\n\nproxyInputs(IonRadioGroup, ['allowEmptySelection', 'name', 'value']);\n\nvar IonRange =\n/** @class */\nfunction () {\n  function IonRange(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionChange', 'ionFocus', 'ionBlur']);\n  }\n  /** @nocollapse */\n\n\n  IonRange.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonRange.ɵfac = function IonRange_Factory(t) {\n    return new (t || IonRange)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonRange.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonRange,\n    selectors: [[\"ion-range\"]],\n    inputs: {\n      color: \"color\",\n      debounce: \"debounce\",\n      disabled: \"disabled\",\n      dualKnobs: \"dualKnobs\",\n      max: \"max\",\n      min: \"min\",\n      mode: \"mode\",\n      name: \"name\",\n      pin: \"pin\",\n      snaps: \"snaps\",\n      step: \"step\",\n      ticks: \"ticks\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonRange_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonRange;\n}();\n\nproxyInputs(IonRange, ['color', 'debounce', 'disabled', 'dualKnobs', 'max', 'min', 'mode', 'name', 'pin', 'snaps', 'step', 'ticks', 'value']);\n\nvar IonRefresher =\n/** @class */\nfunction () {\n  function IonRefresher(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionRefresh', 'ionPull', 'ionStart']);\n  }\n  /** @nocollapse */\n\n\n  IonRefresher.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonRefresher.ɵfac = function IonRefresher_Factory(t) {\n    return new (t || IonRefresher)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonRefresher.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonRefresher,\n    selectors: [[\"ion-refresher\"]],\n    inputs: {\n      closeDuration: \"closeDuration\",\n      disabled: \"disabled\",\n      pullFactor: \"pullFactor\",\n      pullMax: \"pullMax\",\n      pullMin: \"pullMin\",\n      snapbackDuration: \"snapbackDuration\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonRefresher_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonRefresher;\n}();\n\nproxyMethods(IonRefresher, ['complete', 'cancel', 'getProgress']);\nproxyInputs(IonRefresher, ['closeDuration', 'disabled', 'pullFactor', 'pullMax', 'pullMin', 'snapbackDuration']);\n\nvar IonRefresherContent =\n/** @class */\nfunction () {\n  function IonRefresherContent(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonRefresherContent.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonRefresherContent.ɵfac = function IonRefresherContent_Factory(t) {\n    return new (t || IonRefresherContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonRefresherContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonRefresherContent,\n    selectors: [[\"ion-refresher-content\"]],\n    inputs: {\n      pullingIcon: \"pullingIcon\",\n      pullingText: \"pullingText\",\n      refreshingSpinner: \"refreshingSpinner\",\n      refreshingText: \"refreshingText\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonRefresherContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonRefresherContent;\n}();\n\nproxyInputs(IonRefresherContent, ['pullingIcon', 'pullingText', 'refreshingSpinner', 'refreshingText']);\n\nvar IonReorder =\n/** @class */\nfunction () {\n  function IonReorder(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonReorder.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonReorder.ɵfac = function IonReorder_Factory(t) {\n    return new (t || IonReorder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonReorder.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonReorder,\n    selectors: [[\"ion-reorder\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonReorder_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonReorder;\n}();\n\nvar IonReorderGroup =\n/** @class */\nfunction () {\n  function IonReorderGroup(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionItemReorder']);\n  }\n  /** @nocollapse */\n\n\n  IonReorderGroup.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonReorderGroup.ɵfac = function IonReorderGroup_Factory(t) {\n    return new (t || IonReorderGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonReorderGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonReorderGroup,\n    selectors: [[\"ion-reorder-group\"]],\n    inputs: {\n      disabled: \"disabled\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonReorderGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonReorderGroup;\n}();\n\nproxyMethods(IonReorderGroup, ['complete']);\nproxyInputs(IonReorderGroup, ['disabled']);\n\nvar IonRippleEffect =\n/** @class */\nfunction () {\n  function IonRippleEffect(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonRippleEffect.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonRippleEffect.ɵfac = function IonRippleEffect_Factory(t) {\n    return new (t || IonRippleEffect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonRippleEffect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonRippleEffect,\n    selectors: [[\"ion-ripple-effect\"]],\n    inputs: {\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonRippleEffect_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonRippleEffect;\n}();\n\nproxyMethods(IonRippleEffect, ['addRipple']);\nproxyInputs(IonRippleEffect, ['type']);\n\nvar IonRow =\n/** @class */\nfunction () {\n  function IonRow(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonRow.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonRow.ɵfac = function IonRow_Factory(t) {\n    return new (t || IonRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonRow,\n    selectors: [[\"ion-row\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonRow;\n}();\n\nvar IonSearchbar =\n/** @class */\nfunction () {\n  function IonSearchbar(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionInput', 'ionChange', 'ionCancel', 'ionClear', 'ionBlur', 'ionFocus']);\n  }\n  /** @nocollapse */\n\n\n  IonSearchbar.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonSearchbar.ɵfac = function IonSearchbar_Factory(t) {\n    return new (t || IonSearchbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonSearchbar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonSearchbar,\n    selectors: [[\"ion-searchbar\"]],\n    inputs: {\n      animated: \"animated\",\n      autocomplete: \"autocomplete\",\n      autocorrect: \"autocorrect\",\n      cancelButtonIcon: \"cancelButtonIcon\",\n      cancelButtonText: \"cancelButtonText\",\n      clearIcon: \"clearIcon\",\n      color: \"color\",\n      debounce: \"debounce\",\n      disabled: \"disabled\",\n      inputmode: \"inputmode\",\n      mode: \"mode\",\n      placeholder: \"placeholder\",\n      searchIcon: \"searchIcon\",\n      showCancelButton: \"showCancelButton\",\n      spellcheck: \"spellcheck\",\n      type: \"type\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonSearchbar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonSearchbar;\n}();\n\nproxyMethods(IonSearchbar, ['setFocus', 'getInputElement']);\nproxyInputs(IonSearchbar, ['animated', 'autocomplete', 'autocorrect', 'cancelButtonIcon', 'cancelButtonText', 'clearIcon', 'color', 'debounce', 'disabled', 'inputmode', 'mode', 'placeholder', 'searchIcon', 'showCancelButton', 'spellcheck', 'type', 'value']);\n\nvar IonSegment =\n/** @class */\nfunction () {\n  function IonSegment(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionChange']);\n  }\n  /** @nocollapse */\n\n\n  IonSegment.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonSegment.ɵfac = function IonSegment_Factory(t) {\n    return new (t || IonSegment)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonSegment.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonSegment,\n    selectors: [[\"ion-segment\"]],\n    inputs: {\n      color: \"color\",\n      disabled: \"disabled\",\n      mode: \"mode\",\n      scrollable: \"scrollable\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonSegment_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonSegment;\n}();\n\nproxyInputs(IonSegment, ['color', 'disabled', 'mode', 'scrollable', 'value']);\n\nvar IonSegmentButton =\n/** @class */\nfunction () {\n  function IonSegmentButton(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionSelect']);\n  }\n  /** @nocollapse */\n\n\n  IonSegmentButton.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonSegmentButton.ɵfac = function IonSegmentButton_Factory(t) {\n    return new (t || IonSegmentButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonSegmentButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonSegmentButton,\n    selectors: [[\"ion-segment-button\"]],\n    inputs: {\n      checked: \"checked\",\n      disabled: \"disabled\",\n      layout: \"layout\",\n      mode: \"mode\",\n      type: \"type\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonSegmentButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonSegmentButton;\n}();\n\nproxyInputs(IonSegmentButton, ['checked', 'disabled', 'layout', 'mode', 'type', 'value']);\n\nvar IonSelect =\n/** @class */\nfunction () {\n  function IonSelect(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionChange', 'ionCancel', 'ionFocus', 'ionBlur']);\n  }\n  /** @nocollapse */\n\n\n  IonSelect.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonSelect.ɵfac = function IonSelect_Factory(t) {\n    return new (t || IonSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonSelect,\n    selectors: [[\"ion-select\"]],\n    inputs: {\n      cancelText: \"cancelText\",\n      compareWith: \"compareWith\",\n      disabled: \"disabled\",\n      interface: \"interface\",\n      interfaceOptions: \"interfaceOptions\",\n      mode: \"mode\",\n      multiple: \"multiple\",\n      name: \"name\",\n      okText: \"okText\",\n      placeholder: \"placeholder\",\n      selectedText: \"selectedText\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonSelect_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonSelect;\n}();\n\nproxyMethods(IonSelect, ['open']);\nproxyInputs(IonSelect, ['cancelText', 'compareWith', 'disabled', 'interface', 'interfaceOptions', 'mode', 'multiple', 'name', 'okText', 'placeholder', 'selectedText', 'value']);\n\nvar IonSelectOption =\n/** @class */\nfunction () {\n  function IonSelectOption(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonSelectOption.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonSelectOption.ɵfac = function IonSelectOption_Factory(t) {\n    return new (t || IonSelectOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonSelectOption.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonSelectOption,\n    selectors: [[\"ion-select-option\"]],\n    inputs: {\n      disabled: \"disabled\",\n      selected: \"selected\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonSelectOption_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonSelectOption;\n}();\n\nproxyInputs(IonSelectOption, ['disabled', 'selected', 'value']);\n\nvar IonSkeletonText =\n/** @class */\nfunction () {\n  function IonSkeletonText(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonSkeletonText.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonSkeletonText.ɵfac = function IonSkeletonText_Factory(t) {\n    return new (t || IonSkeletonText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonSkeletonText.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonSkeletonText,\n    selectors: [[\"ion-skeleton-text\"]],\n    inputs: {\n      animated: \"animated\",\n      width: \"width\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonSkeletonText_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonSkeletonText;\n}();\n\nproxyInputs(IonSkeletonText, ['animated', 'width']);\n\nvar IonSlide =\n/** @class */\nfunction () {\n  function IonSlide(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonSlide.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonSlide.ɵfac = function IonSlide_Factory(t) {\n    return new (t || IonSlide)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonSlide.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonSlide,\n    selectors: [[\"ion-slide\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonSlide_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonSlide;\n}();\n\nvar IonSlides =\n/** @class */\nfunction () {\n  function IonSlides(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionSlidesDidLoad', 'ionSlideTap', 'ionSlideDoubleTap', 'ionSlideWillChange', 'ionSlideDidChange', 'ionSlideNextStart', 'ionSlidePrevStart', 'ionSlideNextEnd', 'ionSlidePrevEnd', 'ionSlideTransitionStart', 'ionSlideTransitionEnd', 'ionSlideDrag', 'ionSlideReachStart', 'ionSlideReachEnd', 'ionSlideTouchStart', 'ionSlideTouchEnd']);\n  }\n  /** @nocollapse */\n\n\n  IonSlides.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonSlides.ɵfac = function IonSlides_Factory(t) {\n    return new (t || IonSlides)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonSlides.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonSlides,\n    selectors: [[\"ion-slides\"]],\n    inputs: {\n      mode: \"mode\",\n      options: \"options\",\n      pager: \"pager\",\n      scrollbar: \"scrollbar\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonSlides_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonSlides;\n}();\n\nproxyMethods(IonSlides, ['update', 'updateAutoHeight', 'slideTo', 'slideNext', 'slidePrev', 'getActiveIndex', 'getPreviousIndex', 'length', 'isEnd', 'isBeginning', 'startAutoplay', 'stopAutoplay', 'lockSwipeToNext', 'lockSwipeToPrev', 'lockSwipes', 'getSwiper']);\nproxyInputs(IonSlides, ['mode', 'options', 'pager', 'scrollbar']);\n\nvar IonSpinner =\n/** @class */\nfunction () {\n  function IonSpinner(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonSpinner.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonSpinner.ɵfac = function IonSpinner_Factory(t) {\n    return new (t || IonSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonSpinner.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonSpinner,\n    selectors: [[\"ion-spinner\"]],\n    inputs: {\n      color: \"color\",\n      duration: \"duration\",\n      name: \"name\",\n      paused: \"paused\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonSpinner_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonSpinner;\n}();\n\nproxyInputs(IonSpinner, ['color', 'duration', 'name', 'paused']);\n\nvar IonSplitPane =\n/** @class */\nfunction () {\n  function IonSplitPane(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionSplitPaneVisible']);\n  }\n  /** @nocollapse */\n\n\n  IonSplitPane.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonSplitPane.ɵfac = function IonSplitPane_Factory(t) {\n    return new (t || IonSplitPane)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonSplitPane.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonSplitPane,\n    selectors: [[\"ion-split-pane\"]],\n    inputs: {\n      contentId: \"contentId\",\n      disabled: \"disabled\",\n      when: \"when\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonSplitPane_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonSplitPane;\n}();\n\nproxyInputs(IonSplitPane, ['contentId', 'disabled', 'when']);\n\nvar IonTabBar =\n/** @class */\nfunction () {\n  function IonTabBar(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonTabBar.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonTabBar.ɵfac = function IonTabBar_Factory(t) {\n    return new (t || IonTabBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonTabBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonTabBar,\n    selectors: [[\"ion-tab-bar\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\",\n      selectedTab: \"selectedTab\",\n      translucent: \"translucent\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonTabBar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonTabBar;\n}();\n\nproxyInputs(IonTabBar, ['color', 'mode', 'selectedTab', 'translucent']);\n\nvar IonTabButton =\n/** @class */\nfunction () {\n  function IonTabButton(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonTabButton.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonTabButton.ɵfac = function IonTabButton_Factory(t) {\n    return new (t || IonTabButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonTabButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonTabButton,\n    selectors: [[\"ion-tab-button\"]],\n    inputs: {\n      disabled: \"disabled\",\n      download: \"download\",\n      href: \"href\",\n      layout: \"layout\",\n      mode: \"mode\",\n      rel: \"rel\",\n      selected: \"selected\",\n      tab: \"tab\",\n      target: \"target\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonTabButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonTabButton;\n}();\n\nproxyInputs(IonTabButton, ['disabled', 'download', 'href', 'layout', 'mode', 'rel', 'selected', 'tab', 'target']);\n\nvar IonText =\n/** @class */\nfunction () {\n  function IonText(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonText.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonText.ɵfac = function IonText_Factory(t) {\n    return new (t || IonText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonText.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonText,\n    selectors: [[\"ion-text\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonText_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonText;\n}();\n\nproxyInputs(IonText, ['color', 'mode']);\n\nvar IonTextarea =\n/** @class */\nfunction () {\n  function IonTextarea(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionChange', 'ionInput', 'ionBlur', 'ionFocus']);\n  }\n  /** @nocollapse */\n\n\n  IonTextarea.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonTextarea.ɵfac = function IonTextarea_Factory(t) {\n    return new (t || IonTextarea)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonTextarea.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonTextarea,\n    selectors: [[\"ion-textarea\"]],\n    inputs: {\n      autoGrow: \"autoGrow\",\n      autocapitalize: \"autocapitalize\",\n      autofocus: \"autofocus\",\n      clearOnEdit: \"clearOnEdit\",\n      color: \"color\",\n      cols: \"cols\",\n      debounce: \"debounce\",\n      disabled: \"disabled\",\n      maxlength: \"maxlength\",\n      minlength: \"minlength\",\n      mode: \"mode\",\n      name: \"name\",\n      placeholder: \"placeholder\",\n      readonly: \"readonly\",\n      required: \"required\",\n      rows: \"rows\",\n      spellcheck: \"spellcheck\",\n      value: \"value\",\n      wrap: \"wrap\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonTextarea_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonTextarea;\n}();\n\nproxyMethods(IonTextarea, ['setFocus', 'getInputElement']);\nproxyInputs(IonTextarea, ['autoGrow', 'autocapitalize', 'autofocus', 'clearOnEdit', 'color', 'cols', 'debounce', 'disabled', 'maxlength', 'minlength', 'mode', 'name', 'placeholder', 'readonly', 'required', 'rows', 'spellcheck', 'value', 'wrap']);\n\nvar IonThumbnail =\n/** @class */\nfunction () {\n  function IonThumbnail(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonThumbnail.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonThumbnail.ɵfac = function IonThumbnail_Factory(t) {\n    return new (t || IonThumbnail)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonThumbnail.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonThumbnail,\n    selectors: [[\"ion-thumbnail\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonThumbnail_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonThumbnail;\n}();\n\nvar IonTitle =\n/** @class */\nfunction () {\n  function IonTitle(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonTitle.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonTitle.ɵfac = function IonTitle_Factory(t) {\n    return new (t || IonTitle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonTitle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonTitle,\n    selectors: [[\"ion-title\"]],\n    inputs: {\n      color: \"color\",\n      size: \"size\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonTitle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonTitle;\n}();\n\nproxyInputs(IonTitle, ['color', 'size']);\n\nvar IonToggle =\n/** @class */\nfunction () {\n  function IonToggle(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n    proxyOutputs(this, this.el, ['ionChange', 'ionFocus', 'ionBlur']);\n  }\n  /** @nocollapse */\n\n\n  IonToggle.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonToggle.ɵfac = function IonToggle_Factory(t) {\n    return new (t || IonToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonToggle,\n    selectors: [[\"ion-toggle\"]],\n    inputs: {\n      checked: \"checked\",\n      color: \"color\",\n      disabled: \"disabled\",\n      mode: \"mode\",\n      name: \"name\",\n      value: \"value\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonToggle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonToggle;\n}();\n\nproxyInputs(IonToggle, ['checked', 'color', 'disabled', 'mode', 'name', 'value']);\n\nvar IonToolbar =\n/** @class */\nfunction () {\n  function IonToolbar(c, r, z) {\n    this.z = z;\n    c.detach();\n    this.el = r.nativeElement;\n  }\n  /** @nocollapse */\n\n\n  IonToolbar.ctorParameters = function () {\n    return [{\n      type: ChangeDetectorRef\n    }, {\n      type: ElementRef\n    }, {\n      type: NgZone\n    }];\n  };\n\n  IonToolbar.ɵfac = function IonToolbar_Factory(t) {\n    return new (t || IonToolbar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  IonToolbar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonToolbar,\n    selectors: [[\"ion-toolbar\"]],\n    inputs: {\n      color: \"color\",\n      mode: \"mode\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonToolbar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonToolbar;\n}();\n\nproxyInputs(IonToolbar, ['color', 'mode']);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar Config =\n/** @class */\nfunction () {\n  function Config() {}\n  /**\n   * @param {?} key\n   * @param {?=} fallback\n   * @return {?}\n   */\n\n\n  Config.prototype.get =\n  /**\n  * @param {?} key\n  * @param {?=} fallback\n  * @return {?}\n  */\n  function (key, fallback) {\n    /** @type {?} */\n    var c = getConfig();\n\n    if (c) {\n      return c.get(key, fallback);\n    }\n\n    return null;\n  };\n  /**\n   * @param {?} key\n   * @param {?=} fallback\n   * @return {?}\n   */\n\n\n  Config.prototype.getBoolean =\n  /**\n  * @param {?} key\n  * @param {?=} fallback\n  * @return {?}\n  */\n  function (key, fallback) {\n    /** @type {?} */\n    var c = getConfig();\n\n    if (c) {\n      return c.getBoolean(key, fallback);\n    }\n\n    return false;\n  };\n  /**\n   * @param {?} key\n   * @param {?=} fallback\n   * @return {?}\n   */\n\n\n  Config.prototype.getNumber =\n  /**\n  * @param {?} key\n  * @param {?=} fallback\n  * @return {?}\n  */\n  function (key, fallback) {\n    /** @type {?} */\n    var c = getConfig();\n\n    if (c) {\n      return c.getNumber(key, fallback);\n    }\n\n    return 0;\n  };\n  /**\n   * @param {?} key\n   * @param {?=} value\n   * @return {?}\n   */\n\n\n  Config.prototype.set =\n  /**\n  * @param {?} key\n  * @param {?=} value\n  * @return {?}\n  */\n  function (key, value) {\n    console.warn(\"[DEPRECATION][Config]: The Config.set() method is deprecated and will be removed in the next major release.\");\n    /** @type {?} */\n\n    var c = getConfig();\n\n    if (c) {\n      c.set(key, value);\n    }\n  };\n  /** @nocollapse */\n\n\n  Config.ngInjectableDef = defineInjectable({\n    factory: function Config_Factory() {\n      return new Config();\n    },\n    token: Config,\n    providedIn: \"root\"\n  });\n\n  Config.ɵfac = function Config_Factory(t) {\n    return new (t || Config)();\n  };\n\n  Config.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Config,\n    factory: function factory(t) {\n      return Config.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return Config;\n}();\n/** @type {?} */\n\n\nvar ConfigToken = new InjectionToken('USERCONFIG');\n/** @type {?} */\n\nvar getConfig =\n/**\n* @return {?}\n*/\nfunction getConfig() {\n  if (typeof\n  /** @type {?} */\n  window !== 'undefined') {\n    /** @type {?} */\n    var Ionic =\n    /** @type {?} */\n\n    /** @type {?} */\n    window.Ionic;\n\n    if (Ionic && Ionic.config) {\n      return Ionic.config;\n    }\n  }\n\n  return null;\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@description\n * NavParams are an object that exists on a page and can contain data for that particular view.\n * Similar to how data was pass to a view in V1 with `$stateParams`, NavParams offer a much more flexible\n * option with a simple `get` method.\n *\n * \\@usage\n * ```ts\n * import { NavParams } from '\\@ionic/angular';\n *\n * export class MyClass{\n *\n *  constructor(navParams: NavParams){\n *    // userParams is an object we have in our nav-parameters\n *    navParams.get('userParams');\n *  }\n *\n * }\n * ```\n */\n\n\nvar\n/**\n* \\@description\n* NavParams are an object that exists on a page and can contain data for that particular view.\n* Similar to how data was pass to a view in V1 with `$stateParams`, NavParams offer a much more flexible\n* option with a simple `get` method.\n*\n* \\@usage\n* ```ts\n* import { NavParams } from '\\@ionic/angular';\n*\n* export class MyClass{\n*\n*  constructor(navParams: NavParams){\n*    // userParams is an object we have in our nav-parameters\n*    navParams.get('userParams');\n*  }\n*\n* }\n* ```\n*/\nNavParams =\n/** @class */\nfunction () {\n  function NavParams(data) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    this.data = data;\n  }\n  /**\n   * Get the value of a nav-parameter for the current view\n   *\n   * ```ts\n   * import { NavParams } from 'ionic-angular';\n   *\n   * export class MyClass{\n   *  constructor(public navParams: NavParams){\n   *    // userParams is an object we have in our nav-parameters\n   *    this.navParams.get('userParams');\n   *  }\n   * }\n   * ```\n   *\n   * @param param Which param you want to look up\n   */\n\n  /**\n   * Get the value of a nav-parameter for the current view\n   *\n   * ```ts\n   * import { NavParams } from 'ionic-angular';\n   *\n   * export class MyClass{\n   *  constructor(public navParams: NavParams){\n   *    // userParams is an object we have in our nav-parameters\n   *    this.navParams.get('userParams');\n   *  }\n   * }\n   * ```\n   *\n   * @param {?} param Which param you want to look up\n   * @return {?}\n   */\n\n\n  NavParams.prototype.get =\n  /**\n  * Get the value of a nav-parameter for the current view\n  *\n  * ```ts\n  * import { NavParams } from 'ionic-angular';\n  *\n  * export class MyClass{\n  *  constructor(public navParams: NavParams){\n  *    // userParams is an object we have in our nav-parameters\n  *    this.navParams.get('userParams');\n  *  }\n  * }\n  * ```\n  *\n  * @param {?} param Which param you want to look up\n  * @return {?}\n  */\n  function (param) {\n    return this.data[param];\n  };\n\n  return NavParams;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar AngularDelegate =\n/** @class */\nfunction () {\n  function AngularDelegate(zone, appRef) {\n    this.zone = zone;\n    this.appRef = appRef;\n  }\n  /**\n   * @param {?} resolver\n   * @param {?} injector\n   * @param {?=} location\n   * @return {?}\n   */\n\n\n  AngularDelegate.prototype.create =\n  /**\n  * @param {?} resolver\n  * @param {?} injector\n  * @param {?=} location\n  * @return {?}\n  */\n  function (resolver, injector, location) {\n    return new AngularFrameworkDelegate(resolver, injector, location, this.appRef, this.zone);\n  };\n  /** @nocollapse */\n\n\n  AngularDelegate.ctorParameters = function () {\n    return [{\n      type: NgZone\n    }, {\n      type: ApplicationRef\n    }];\n  };\n\n  AngularDelegate.ɵfac = function AngularDelegate_Factory(t) {\n    return new (t || AngularDelegate)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef));\n  };\n\n  AngularDelegate.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: AngularDelegate,\n    factory: function factory(t) {\n      return AngularDelegate.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return AngularDelegate;\n}();\n\nvar AngularFrameworkDelegate =\n/** @class */\nfunction () {\n  function AngularFrameworkDelegate(resolver, injector, location, appRef, zone) {\n    this.resolver = resolver;\n    this.injector = injector;\n    this.location = location;\n    this.appRef = appRef;\n    this.zone = zone;\n    this.elRefMap = new WeakMap();\n    this.elEventsMap = new WeakMap();\n  }\n  /**\n   * @param {?} container\n   * @param {?} component\n   * @param {?=} params\n   * @param {?=} cssClasses\n   * @return {?}\n   */\n\n\n  AngularFrameworkDelegate.prototype.attachViewToDom =\n  /**\n  * @param {?} container\n  * @param {?} component\n  * @param {?=} params\n  * @param {?=} cssClasses\n  * @return {?}\n  */\n  function (container, component, params, cssClasses) {\n    var _this = this;\n\n    return this.zone.run(\n    /**\n    * @return {?}\n    */\n    function () {\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @return {?}\n      */\n      function (resolve) {\n        /** @type {?} */\n        var el = attachView(_this.zone, _this.resolver, _this.injector, _this.location, _this.appRef, _this.elRefMap, _this.elEventsMap, container, component, params, cssClasses);\n        resolve(el);\n      });\n    });\n  };\n  /**\n   * @param {?} _container\n   * @param {?} component\n   * @return {?}\n   */\n\n\n  AngularFrameworkDelegate.prototype.removeViewFromDom =\n  /**\n  * @param {?} _container\n  * @param {?} component\n  * @return {?}\n  */\n  function (_container, component) {\n    var _this = this;\n\n    return this.zone.run(\n    /**\n    * @return {?}\n    */\n    function () {\n      return new Promise(\n      /**\n      * @param {?} resolve\n      * @return {?}\n      */\n      function (resolve) {\n        /** @type {?} */\n        var componentRef = _this.elRefMap.get(component);\n\n        if (componentRef) {\n          componentRef.destroy();\n\n          _this.elRefMap.delete(component);\n          /** @type {?} */\n\n\n          var unbindEvents = _this.elEventsMap.get(component);\n\n          if (unbindEvents) {\n            unbindEvents();\n\n            _this.elEventsMap.delete(component);\n          }\n        }\n\n        resolve();\n      });\n    });\n  };\n\n  return AngularFrameworkDelegate;\n}();\n/** @type {?} */\n\n\nvar attachView =\n/**\n* @param {?} zone\n* @param {?} resolver\n* @param {?} injector\n* @param {?} location\n* @param {?} appRef\n* @param {?} elRefMap\n* @param {?} elEventsMap\n* @param {?} container\n* @param {?} component\n* @param {?} params\n* @param {?} cssClasses\n* @return {?}\n*/\nfunction attachView(zone, resolver, injector, location, appRef, elRefMap, elEventsMap, container, component, params, cssClasses) {\n  /** @type {?} */\n  var factory = resolver.resolveComponentFactory(component);\n  /** @type {?} */\n\n  var childInjector = Injector.create({\n    providers: getProviders(params),\n    parent: injector\n  });\n  /** @type {?} */\n\n  var componentRef = location ? location.createComponent(factory, location.length, childInjector) : factory.create(childInjector);\n  /** @type {?} */\n\n  var instance = componentRef.instance;\n  /** @type {?} */\n\n  var hostElement = componentRef.location.nativeElement;\n\n  if (params) {\n    Object.assign(instance, params);\n  }\n\n  if (cssClasses) {\n    for (var _i = 0, cssClasses_1 = cssClasses; _i < cssClasses_1.length; _i++) {\n      var clazz = cssClasses_1[_i];\n      hostElement.classList.add(clazz);\n    }\n  }\n  /** @type {?} */\n\n\n  var unbindEvents = bindLifecycleEvents(zone, instance, hostElement);\n  container.appendChild(hostElement);\n\n  if (!location) {\n    appRef.attachView(componentRef.hostView);\n  }\n\n  componentRef.changeDetectorRef.reattach();\n  elRefMap.set(hostElement, componentRef);\n  elEventsMap.set(hostElement, unbindEvents);\n  return hostElement;\n};\n/** @type {?} */\n\n\nvar LIFECYCLES = [LIFECYCLE_WILL_ENTER, LIFECYCLE_DID_ENTER, LIFECYCLE_WILL_LEAVE, LIFECYCLE_DID_LEAVE, LIFECYCLE_WILL_UNLOAD];\n/** @type {?} */\n\nvar bindLifecycleEvents =\n/**\n* @param {?} zone\n* @param {?} instance\n* @param {?} element\n* @return {?}\n*/\nfunction bindLifecycleEvents(zone, instance, element) {\n  return zone.run(\n  /**\n  * @return {?}\n  */\n  function () {\n    /** @type {?} */\n    var unregisters = LIFECYCLES.filter(\n    /**\n    * @param {?} eventName\n    * @return {?}\n    */\n    function (eventName) {\n      return typeof instance[eventName] === 'function';\n    }).map(\n    /**\n    * @param {?} eventName\n    * @return {?}\n    */\n    function (eventName) {\n      /** @type {?} */\n      var handler =\n      /**\n      * @param {?} ev\n      * @return {?}\n      */\n      function handler(ev) {\n        return instance[eventName](ev.detail);\n      };\n\n      element.addEventListener(eventName, handler);\n      return (\n        /**\n        * @return {?}\n        */\n        function () {\n          return element.removeEventListener(eventName, handler);\n        }\n      );\n    });\n    return (\n      /**\n      * @return {?}\n      */\n      function () {\n        return unregisters.forEach(\n        /**\n        * @param {?} fn\n        * @return {?}\n        */\n        function (fn) {\n          return fn();\n        });\n      }\n    );\n  });\n};\n/** @type {?} */\n\n\nvar NavParamsToken = new InjectionToken('NavParamsToken');\n/** @type {?} */\n\nvar getProviders =\n/**\n* @param {?} params\n* @return {?}\n*/\nfunction getProviders(params) {\n  return [{\n    provide: NavParamsToken,\n    useValue: params\n  }, {\n    provide: NavParams,\n    useFactory: provideNavParamsInjectable,\n    deps: [NavParamsToken]\n  }];\n};\n/** @type {?} */\n\n\nvar provideNavParamsInjectable =\n/**\n* @param {?} params\n* @return {?}\n*/\nfunction provideNavParamsInjectable(params) {\n  return new NavParams(params);\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar insertView =\n/**\n* @param {?} views\n* @param {?} view\n* @param {?} direction\n* @return {?}\n*/\nfunction insertView(views, view, direction) {\n  if (direction === 'root') {\n    return setRoot(views, view);\n  } else if (direction === 'forward') {\n    return setForward(views, view);\n  } else {\n    return setBack(views, view);\n  }\n};\n/** @type {?} */\n\n\nvar setRoot =\n/**\n* @param {?} views\n* @param {?} view\n* @return {?}\n*/\nfunction setRoot(views, view) {\n  views = views.filter(\n  /**\n  * @param {?} v\n  * @return {?}\n  */\n  function (v) {\n    return v.stackId !== view.stackId;\n  });\n  views.push(view);\n  return views;\n};\n/** @type {?} */\n\n\nvar setForward =\n/**\n* @param {?} views\n* @param {?} view\n* @return {?}\n*/\nfunction setForward(views, view) {\n  /** @type {?} */\n  var index = views.indexOf(view);\n\n  if (index >= 0) {\n    views = views.filter(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    function (v) {\n      return v.stackId !== view.stackId || v.id <= view.id;\n    });\n  } else {\n    views.push(view);\n  }\n\n  return views;\n};\n/** @type {?} */\n\n\nvar setBack =\n/**\n* @param {?} views\n* @param {?} view\n* @return {?}\n*/\nfunction setBack(views, view) {\n  /** @type {?} */\n  var index = views.indexOf(view);\n\n  if (index >= 0) {\n    return views.filter(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    function (v) {\n      return v.stackId !== view.stackId || v.id <= view.id;\n    });\n  } else {\n    return setRoot(views, view);\n  }\n};\n/** @type {?} */\n\n\nvar getUrl =\n/**\n* @param {?} router\n* @param {?} activatedRoute\n* @return {?}\n*/\nfunction getUrl(router, activatedRoute) {\n  /** @type {?} */\n  var urlTree = router.createUrlTree(['.'], {\n    relativeTo: activatedRoute\n  });\n  return router.serializeUrl(urlTree);\n};\n/** @type {?} */\n\n\nvar isTabSwitch =\n/**\n* @param {?} enteringView\n* @param {?} leavingView\n* @return {?}\n*/\nfunction isTabSwitch(enteringView, leavingView) {\n  if (!leavingView) {\n    return true;\n  }\n\n  return enteringView.stackId !== leavingView.stackId;\n};\n/** @type {?} */\n\n\nvar computeStackId =\n/**\n* @param {?} prefixUrl\n* @param {?} url\n* @return {?}\n*/\nfunction computeStackId(prefixUrl, url) {\n  if (!prefixUrl) {\n    return undefined;\n  }\n  /** @type {?} */\n\n\n  var segments = toSegments(url);\n\n  for (var i = 0; i < segments.length; i++) {\n    if (i >= prefixUrl.length) {\n      return segments[i];\n    }\n\n    if (segments[i] !== prefixUrl[i]) {\n      return undefined;\n    }\n  }\n\n  return undefined;\n};\n/** @type {?} */\n\n\nvar toSegments =\n/**\n* @param {?} path\n* @return {?}\n*/\nfunction toSegments(path) {\n  return path.split('/').map(\n  /**\n  * @param {?} s\n  * @return {?}\n  */\n  function (s) {\n    return s.trim();\n  }).filter(\n  /**\n  * @param {?} s\n  * @return {?}\n  */\n  function (s) {\n    return s !== '';\n  });\n};\n/** @type {?} */\n\n\nvar destroyView =\n/**\n* @param {?} view\n* @return {?}\n*/\nfunction destroyView(view) {\n  if (view) {\n    // TODO lifecycle event\n    view.ref.destroy();\n    view.unlistenEvents();\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar StackController =\n/** @class */\nfunction () {\n  function StackController(tabsPrefix, containerEl, router, navCtrl, zone, location) {\n    this.containerEl = containerEl;\n    this.router = router;\n    this.navCtrl = navCtrl;\n    this.zone = zone;\n    this.location = location;\n    this.views = [];\n    this.skipTransition = false;\n    this.nextId = 0;\n    this.tabsPrefix = tabsPrefix !== undefined ? toSegments(tabsPrefix) : undefined;\n  }\n  /**\n   * @param {?} ref\n   * @param {?} activatedRoute\n   * @return {?}\n   */\n\n\n  StackController.prototype.createView =\n  /**\n  * @param {?} ref\n  * @param {?} activatedRoute\n  * @return {?}\n  */\n  function (ref, activatedRoute) {\n    /** @type {?} */\n    var url = getUrl(this.router, activatedRoute);\n    /** @type {?} */\n\n    var element =\n    /** @type {?} */\n    ref && ref.location && ref.location.nativeElement;\n    /** @type {?} */\n\n    var unlistenEvents = bindLifecycleEvents(this.zone, ref.instance, element);\n    return {\n      id: this.nextId++,\n      stackId: computeStackId(this.tabsPrefix, url),\n      unlistenEvents: unlistenEvents,\n      element: element,\n      ref: ref,\n      url: url\n    };\n  };\n  /**\n   * @param {?} activatedRoute\n   * @return {?}\n   */\n\n\n  StackController.prototype.getExistingView =\n  /**\n  * @param {?} activatedRoute\n  * @return {?}\n  */\n  function (activatedRoute) {\n    /** @type {?} */\n    var activatedUrlKey = getUrl(this.router, activatedRoute);\n    /** @type {?} */\n\n    var view = this.views.find(\n    /**\n    * @param {?} vw\n    * @return {?}\n    */\n    function (vw) {\n      return vw.url === activatedUrlKey;\n    });\n\n    if (view) {\n      view.ref.changeDetectorRef.reattach();\n    }\n\n    return view;\n  };\n  /**\n   * @param {?} enteringView\n   * @return {?}\n   */\n\n\n  StackController.prototype.setActive =\n  /**\n  * @param {?} enteringView\n  * @return {?}\n  */\n  function (enteringView) {\n    var _this = this;\n\n    var _a = this.navCtrl.consumeTransition(),\n        direction = _a.direction,\n        animation = _a.animation;\n    /** @type {?} */\n\n\n    var leavingView = this.activeView;\n    /** @type {?} */\n\n    var tabSwitch = isTabSwitch(enteringView, leavingView);\n\n    if (tabSwitch) {\n      direction = 'back';\n      animation = undefined;\n    }\n    /** @type {?} */\n\n\n    var viewsSnapshot = this.views.slice();\n    /** @type {?} */\n\n    var currentNavigation;\n    /** @type {?} */\n\n    var router =\n    /** @type {?} */\n    this.router; // Angular >= 7.2.0\n\n    if (router.getCurrentNavigation) {\n      currentNavigation = router.getCurrentNavigation(); // Angular < 7.2.0\n    } else if (router.navigations && router.navigations.value) {\n      currentNavigation = router.navigations.value;\n    }\n    /**\n     * If the navigation action\n     * sets `replaceUrl: true`\n     * then we need to make sure\n     * we remove the last item\n     * from our views stack\n     */\n\n\n    if (currentNavigation && currentNavigation.extras && currentNavigation.extras.replaceUrl) {\n      if (this.views.length > 0) {\n        this.views.splice(-1, 1);\n      }\n    }\n    /** @type {?} */\n\n\n    var reused = this.views.includes(enteringView);\n    /** @type {?} */\n\n    var views = this.insertView(enteringView, direction); // Trigger change detection before transition starts\n    // This will call ngOnInit() the first time too, just after the view\n    // was attached to the dom, but BEFORE the transition starts\n\n    if (!reused) {\n      enteringView.ref.changeDetectorRef.detectChanges();\n    } // Wait until previous transitions finish\n\n\n    return this.zone.runOutsideAngular(\n    /**\n    * @return {?}\n    */\n    function () {\n      return _this.wait(\n      /**\n      * @return {?}\n      */\n      function () {\n        // disconnect leaving page from change detection to\n        // reduce jank during the page transition\n        if (leavingView) {\n          leavingView.ref.changeDetectorRef.detach();\n        } // In case the enteringView is the same as the leavingPage we need to reattach()\n\n\n        enteringView.ref.changeDetectorRef.reattach();\n        return _this.transition(enteringView, leavingView, animation, _this.canGoBack(1), false).then(\n        /**\n        * @return {?}\n        */\n        function () {\n          return cleanupAsync(enteringView, views, viewsSnapshot, _this.location);\n        }).then(\n        /**\n        * @return {?}\n        */\n        function () {\n          return {\n            enteringView: enteringView,\n            direction: direction,\n            animation: animation,\n            tabSwitch: tabSwitch\n          };\n        });\n      });\n    });\n  };\n  /**\n   * @param {?} deep\n   * @param {?=} stackId\n   * @return {?}\n   */\n\n\n  StackController.prototype.canGoBack =\n  /**\n  * @param {?} deep\n  * @param {?=} stackId\n  * @return {?}\n  */\n  function (deep, stackId) {\n    if (stackId === void 0) {\n      stackId = this.getActiveStackId();\n    }\n\n    return this.getStack(stackId).length > deep;\n  };\n  /**\n   * @param {?} deep\n   * @param {?=} stackId\n   * @return {?}\n   */\n\n\n  StackController.prototype.pop =\n  /**\n  * @param {?} deep\n  * @param {?=} stackId\n  * @return {?}\n  */\n  function (deep, stackId) {\n    var _this = this;\n\n    if (stackId === void 0) {\n      stackId = this.getActiveStackId();\n    }\n\n    return this.zone.run(\n    /**\n    * @return {?}\n    */\n    function () {\n      /** @type {?} */\n      var views = _this.getStack(stackId);\n\n      if (views.length <= deep) {\n        return Promise.resolve(false);\n      }\n      /** @type {?} */\n\n\n      var view = views[views.length - deep - 1];\n      /** @type {?} */\n\n      var url = view.url;\n      /** @type {?} */\n\n      var viewSavedData = view.savedData;\n\n      if (viewSavedData) {\n        /** @type {?} */\n        var primaryOutlet = viewSavedData.get('primary');\n\n        if (primaryOutlet && primaryOutlet.route && primaryOutlet.route._routerState && primaryOutlet.route._routerState.snapshot && primaryOutlet.route._routerState.snapshot.url) {\n          url = primaryOutlet.route._routerState.snapshot.url;\n        }\n      }\n\n      return _this.navCtrl.navigateBack(url, view.savedExtras).then(\n      /**\n      * @return {?}\n      */\n      function () {\n        return true;\n      });\n    });\n  };\n  /**\n   * @return {?}\n   */\n\n\n  StackController.prototype.startBackTransition =\n  /**\n  * @return {?}\n  */\n  function () {\n    var _this = this;\n    /** @type {?} */\n\n\n    var leavingView = this.activeView;\n\n    if (leavingView) {\n      /** @type {?} */\n      var views = this.getStack(leavingView.stackId);\n      /** @type {?} */\n\n      var enteringView_1 = views[views.length - 2];\n      return this.wait(\n      /**\n      * @return {?}\n      */\n      function () {\n        return _this.transition(enteringView_1, // entering view\n        leavingView, // leaving view\n        'back', _this.canGoBack(2), true);\n      });\n    }\n\n    return Promise.resolve();\n  };\n  /**\n   * @param {?} shouldComplete\n   * @return {?}\n   */\n\n\n  StackController.prototype.endBackTransition =\n  /**\n  * @param {?} shouldComplete\n  * @return {?}\n  */\n  function (shouldComplete) {\n    if (shouldComplete) {\n      this.skipTransition = true;\n      this.pop(1);\n    } else if (this.activeView) {\n      cleanup(this.activeView, this.views, this.views, this.location);\n    }\n  };\n  /**\n   * @param {?=} stackId\n   * @return {?}\n   */\n\n\n  StackController.prototype.getLastUrl =\n  /**\n  * @param {?=} stackId\n  * @return {?}\n  */\n  function (stackId) {\n    /** @type {?} */\n    var views = this.getStack(stackId);\n    return views.length > 0 ? views[views.length - 1] : undefined;\n  };\n  /**\n   * @return {?}\n   */\n\n\n  StackController.prototype.getActiveStackId =\n  /**\n  * @return {?}\n  */\n  function () {\n    return this.activeView ? this.activeView.stackId : undefined;\n  };\n  /**\n   * @return {?}\n   */\n\n\n  StackController.prototype.destroy =\n  /**\n  * @return {?}\n  */\n  function () {\n    this.containerEl =\n    /** @type {?} */\n    undefined;\n    this.views.forEach(destroyView);\n    this.activeView = undefined;\n    this.views = [];\n  };\n  /**\n   * @private\n   * @param {?} stackId\n   * @return {?}\n   */\n\n\n  StackController.prototype.getStack =\n  /**\n  * @private\n  * @param {?} stackId\n  * @return {?}\n  */\n  function (stackId) {\n    return this.views.filter(\n    /**\n    * @param {?} v\n    * @return {?}\n    */\n    function (v) {\n      return v.stackId === stackId;\n    });\n  };\n  /**\n   * @private\n   * @param {?} enteringView\n   * @param {?} direction\n   * @return {?}\n   */\n\n\n  StackController.prototype.insertView =\n  /**\n  * @private\n  * @param {?} enteringView\n  * @param {?} direction\n  * @return {?}\n  */\n  function (enteringView, direction) {\n    this.activeView = enteringView;\n    this.views = insertView(this.views, enteringView, direction);\n    return this.views.slice();\n  };\n  /**\n   * @private\n   * @param {?} enteringView\n   * @param {?} leavingView\n   * @param {?} direction\n   * @param {?} showGoBack\n   * @param {?} progressAnimation\n   * @return {?}\n   */\n\n\n  StackController.prototype.transition =\n  /**\n  * @private\n  * @param {?} enteringView\n  * @param {?} leavingView\n  * @param {?} direction\n  * @param {?} showGoBack\n  * @param {?} progressAnimation\n  * @return {?}\n  */\n  function (enteringView, leavingView, direction, showGoBack, progressAnimation) {\n    if (this.skipTransition) {\n      this.skipTransition = false;\n      return Promise.resolve(false);\n    }\n\n    if (leavingView === enteringView) {\n      return Promise.resolve(false);\n    }\n    /** @type {?} */\n\n\n    var enteringEl = enteringView ? enteringView.element : undefined;\n    /** @type {?} */\n\n    var leavingEl = leavingView ? leavingView.element : undefined;\n    /** @type {?} */\n\n    var containerEl = this.containerEl;\n\n    if (enteringEl && enteringEl !== leavingEl) {\n      enteringEl.classList.add('ion-page');\n      enteringEl.classList.add('ion-page-invisible');\n\n      if (enteringEl.parentElement !== containerEl) {\n        containerEl.appendChild(enteringEl);\n      }\n\n      if (\n      /** @type {?} */\n      containerEl.commit) {\n        return containerEl.commit(enteringEl, leavingEl, {\n          deepWait: true,\n          duration: direction === undefined ? 0 : undefined,\n          direction: direction,\n          showGoBack: showGoBack,\n          progressAnimation: progressAnimation\n        });\n      }\n    }\n\n    return Promise.resolve(false);\n  };\n  /**\n   * @private\n   * @template T\n   * @param {?} task\n   * @return {?}\n   */\n\n\n  StackController.prototype.wait =\n  /**\n  * @private\n  * @template T\n  * @param {?} task\n  * @return {?}\n  */\n  function (task) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promise;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.runningTask !== undefined)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.runningTask];\n\n          case 1:\n            _a.sent();\n\n            this.runningTask = undefined;\n            _a.label = 2;\n\n          case 2:\n            promise = this.runningTask = task();\n            return [2\n            /*return*/\n            , promise];\n        }\n      });\n    });\n  };\n\n  return StackController;\n}();\n/** @type {?} */\n\n\nvar cleanupAsync =\n/**\n* @param {?} activeRoute\n* @param {?} views\n* @param {?} viewsSnapshot\n* @param {?} location\n* @return {?}\n*/\nfunction cleanupAsync(activeRoute, views, viewsSnapshot, location) {\n  if (typeof\n  /** @type {?} */\n  requestAnimationFrame === 'function') {\n    return new Promise(\n    /**\n    * @param {?} resolve\n    * @return {?}\n    */\n    function (resolve) {\n      requestAnimationFrame(\n      /**\n      * @return {?}\n      */\n      function () {\n        cleanup(activeRoute, views, viewsSnapshot, location);\n        resolve();\n      });\n    });\n  }\n\n  return Promise.resolve();\n};\n/** @type {?} */\n\n\nvar cleanup =\n/**\n* @param {?} activeRoute\n* @param {?} views\n* @param {?} viewsSnapshot\n* @param {?} location\n* @return {?}\n*/\nfunction cleanup(activeRoute, views, viewsSnapshot, location) {\n  viewsSnapshot.filter(\n  /**\n  * @param {?} view\n  * @return {?}\n  */\n  function (view) {\n    return !views.includes(view);\n  }).forEach(destroyView);\n  views.forEach(\n  /**\n  * @param {?} view\n  * @return {?}\n  */\n  function (view) {\n    /**\n     * In the event that a user navigated multiple\n     * times in rapid succession, we want to make sure\n     * we don't pre-emptively detach a view while\n     * it is in mid-transition.\n     *\n     * In this instance we also do not care about query\n     * params or fragments as it will be the same view regardless\n     * @type {?}\n     */\n    var locationWithoutParams = location.path().split('?')[0];\n    /** @type {?} */\n\n    var locationWithoutFragment = locationWithoutParams.split('#')[0];\n\n    if (view !== activeRoute && view.url !== locationWithoutFragment) {\n      /** @type {?} */\n      var element = view.element;\n      element.setAttribute('aria-hidden', 'true');\n      element.classList.add('ion-page-hidden');\n      view.ref.changeDetectorRef.detach();\n    }\n  });\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar IonRouterOutlet =\n/** @class */\nfunction () {\n  function IonRouterOutlet(parentContexts, location, resolver, name, tabs, config, navCtrl, commonLocation, elementRef, router, zone, activatedRoute, parentOutlet) {\n    this.parentContexts = parentContexts;\n    this.location = location;\n    this.resolver = resolver;\n    this.config = config;\n    this.navCtrl = navCtrl;\n    this.parentOutlet = parentOutlet;\n    this.activated = null;\n    this.activatedView = null;\n    this._activatedRoute = null; // Maintain map of activated route proxies for each component instance\n\n    this.proxyMap = new WeakMap(); // Keep the latest activated route in a subject for the proxy routes to switch map to\n\n    this.currentActivatedRoute$ = new BehaviorSubject(null);\n    this.stackEvents = new EventEmitter();\n    this.activateEvents = new EventEmitter();\n    this.deactivateEvents = new EventEmitter();\n    this.nativeEl = elementRef.nativeElement;\n    this.name = name || PRIMARY_OUTLET;\n    this.tabsPrefix = tabs === 'true' ? getUrl(router, activatedRoute) : undefined;\n    this.stackCtrl = new StackController(this.tabsPrefix, this.nativeEl, router, navCtrl, zone, commonLocation);\n    parentContexts.onChildOutletCreated(this.name,\n    /** @type {?} */\n    this);\n  }\n\n  Object.defineProperty(IonRouterOutlet.prototype, \"animated\", {\n    set:\n    /**\n    * @param {?} animated\n    * @return {?}\n    */\n    function set(animated) {\n      this.nativeEl.animated = animated;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IonRouterOutlet.prototype, \"swipeGesture\", {\n    set:\n    /**\n    * @param {?} swipe\n    * @return {?}\n    */\n    function set(swipe) {\n      var _this = this;\n\n      this._swipeGesture = swipe;\n      this.nativeEl.swipeHandler = swipe ? {\n        canStart:\n        /**\n        * @return {?}\n        */\n        function canStart() {\n          return _this.stackCtrl.canGoBack(1);\n        },\n        onStart:\n        /**\n        * @return {?}\n        */\n        function onStart() {\n          return _this.stackCtrl.startBackTransition();\n        },\n        onEnd:\n        /**\n        * @param {?} shouldContinue\n        * @return {?}\n        */\n        function onEnd(shouldContinue) {\n          return _this.stackCtrl.endBackTransition(shouldContinue);\n        }\n      } : undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @return {?}\n   */\n\n  IonRouterOutlet.prototype.ngOnDestroy =\n  /**\n  * @return {?}\n  */\n  function () {\n    this.stackCtrl.destroy();\n  };\n  /**\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.getContext =\n  /**\n  * @return {?}\n  */\n  function () {\n    return this.parentContexts.getContext(this.name);\n  };\n  /**\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.ngOnInit =\n  /**\n  * @return {?}\n  */\n  function () {\n    var _this = this;\n\n    if (!this.activated) {\n      // If the outlet was not instantiated at the time the route got activated we need to populate\n      // the outlet when it is initialized (ie inside a NgIf)\n\n      /** @type {?} */\n      var context = this.getContext();\n\n      if (context && context.route) {\n        this.activateWith(context.route, context.resolver || null);\n      }\n    }\n\n    if (\n    /** @type {?} */\n    this.nativeEl.componentOnReady) {\n      this.nativeEl.componentOnReady().then(\n      /**\n      * @return {?}\n      */\n      function () {\n        if (_this._swipeGesture === undefined) {\n          _this.swipeGesture = _this.config.getBoolean('swipeBackEnabled',\n          /** @type {?} */\n          _this.nativeEl.mode === 'ios');\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(IonRouterOutlet.prototype, \"isActivated\", {\n    get:\n    /**\n    * @return {?}\n    */\n    function get() {\n      return !!this.activated;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IonRouterOutlet.prototype, \"component\", {\n    get:\n    /**\n    * @return {?}\n    */\n    function get() {\n      if (!this.activated) {\n        throw new Error('Outlet is not activated');\n      }\n\n      return this.activated.instance;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IonRouterOutlet.prototype, \"activatedRoute\", {\n    get:\n    /**\n    * @return {?}\n    */\n    function get() {\n      if (!this.activated) {\n        throw new Error('Outlet is not activated');\n      }\n\n      return (\n        /** @type {?} */\n        this._activatedRoute\n      );\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(IonRouterOutlet.prototype, \"activatedRouteData\", {\n    get:\n    /**\n    * @return {?}\n    */\n    function get() {\n      if (this._activatedRoute) {\n        return this._activatedRoute.snapshot.data;\n      }\n\n      return {};\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree\n   */\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to detach the subtree\n   * @return {?}\n   */\n\n  IonRouterOutlet.prototype.detach =\n  /**\n  * Called when the `RouteReuseStrategy` instructs to detach the subtree\n  * @return {?}\n  */\n  function () {\n    throw new Error('incompatible reuse strategy');\n  };\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n   */\n\n  /**\n   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n   * @param {?} _ref\n   * @param {?} _activatedRoute\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.attach =\n  /**\n  * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree\n  * @param {?} _ref\n  * @param {?} _activatedRoute\n  * @return {?}\n  */\n  function (_ref, _activatedRoute) {\n    throw new Error('incompatible reuse strategy');\n  };\n  /**\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.deactivate =\n  /**\n  * @return {?}\n  */\n  function () {\n    if (this.activated) {\n      if (this.activatedView) {\n        this.activatedView.savedData = new Map(\n        /** @type {?} */\n        this.getContext().children['contexts']);\n        /**\n         * Ensure we are saving the NavigationExtras\n         * data otherwise it will be lost\n         */\n\n        this.activatedView.savedExtras = {};\n        /** @type {?} */\n\n        var context =\n        /** @type {?} */\n        this.getContext();\n\n        if (context.route) {\n          /** @type {?} */\n          var contextSnapshot = context.route.snapshot;\n          this.activatedView.savedExtras.queryParams = contextSnapshot.queryParams;\n          this.activatedView.savedExtras.fragment = contextSnapshot.fragment;\n        }\n      }\n      /** @type {?} */\n\n\n      var c = this.component;\n      this.activatedView = null;\n      this.activated = null;\n      this._activatedRoute = null;\n      this.deactivateEvents.emit(c);\n    }\n  };\n  /**\n   * @param {?} activatedRoute\n   * @param {?} resolver\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.activateWith =\n  /**\n  * @param {?} activatedRoute\n  * @param {?} resolver\n  * @return {?}\n  */\n  function (activatedRoute, resolver) {\n    var _this = this;\n\n    if (this.isActivated) {\n      throw new Error('Cannot activate an already activated outlet');\n    }\n\n    this._activatedRoute = activatedRoute;\n    /** @type {?} */\n\n    var cmpRef;\n    /** @type {?} */\n\n    var enteringView = this.stackCtrl.getExistingView(activatedRoute);\n\n    if (enteringView) {\n      cmpRef = this.activated = enteringView.ref;\n      /** @type {?} */\n\n      var saved = enteringView.savedData;\n\n      if (saved) {\n        // self-restore\n\n        /** @type {?} */\n        var context =\n        /** @type {?} */\n        this.getContext();\n        context.children['contexts'] = saved;\n      } // Updated activated route proxy for this component\n\n\n      this.updateActivatedRouteProxy(cmpRef.instance, activatedRoute);\n    } else {\n      /** @type {?} */\n      var snapshot =\n      /** @type {?} */\n      activatedRoute._futureSnapshot;\n      /** @type {?} */\n\n      var component =\n      /** @type {?} */\n\n      /** @type {?} */\n      snapshot.routeConfig.component;\n      resolver = resolver || this.resolver;\n      /** @type {?} */\n\n      var factory = resolver.resolveComponentFactory(component);\n      /** @type {?} */\n\n      var childContexts = this.parentContexts.getOrCreateContext(this.name).children; // We create an activated route proxy object that will maintain future updates for this component\n      // over its lifecycle in the stack.\n\n      /** @type {?} */\n\n      var component$ = new BehaviorSubject(null);\n      /** @type {?} */\n\n      var activatedRouteProxy = this.createActivatedRouteProxy(component$, activatedRoute);\n      /** @type {?} */\n\n      var injector = new OutletInjector(activatedRouteProxy, childContexts, this.location.injector);\n      cmpRef = this.activated = this.location.createComponent(factory, this.location.length, injector); // Once the component is created we can push it to our local subject supplied to the proxy\n\n      component$.next(cmpRef.instance); // Calling `markForCheck` to make sure we will run the change detection when the\n      // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.\n\n      enteringView = this.stackCtrl.createView(this.activated, activatedRoute); // Store references to the proxy by component\n\n      this.proxyMap.set(cmpRef.instance, activatedRouteProxy);\n      this.currentActivatedRoute$.next({\n        component: cmpRef.instance,\n        activatedRoute: activatedRoute\n      });\n    }\n\n    this.activatedView = enteringView;\n    this.stackCtrl.setActive(enteringView).then(\n    /**\n    * @param {?} data\n    * @return {?}\n    */\n    function (data) {\n      _this.navCtrl.setTopOutlet(_this);\n\n      _this.activateEvents.emit(cmpRef.instance);\n\n      _this.stackEvents.emit(data);\n    });\n  };\n  /**\n   * Returns `true` if there are pages in the stack to go back.\n   */\n\n  /**\n   * Returns `true` if there are pages in the stack to go back.\n   * @param {?=} deep\n   * @param {?=} stackId\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.canGoBack =\n  /**\n  * Returns `true` if there are pages in the stack to go back.\n  * @param {?=} deep\n  * @param {?=} stackId\n  * @return {?}\n  */\n  function (deep, stackId) {\n    if (deep === void 0) {\n      deep = 1;\n    }\n\n    return this.stackCtrl.canGoBack(deep, stackId);\n  };\n  /**\n   * Resolves to `true` if it the outlet was able to sucessfully pop the last N pages.\n   */\n\n  /**\n   * Resolves to `true` if it the outlet was able to sucessfully pop the last N pages.\n   * @param {?=} deep\n   * @param {?=} stackId\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.pop =\n  /**\n  * Resolves to `true` if it the outlet was able to sucessfully pop the last N pages.\n  * @param {?=} deep\n  * @param {?=} stackId\n  * @return {?}\n  */\n  function (deep, stackId) {\n    if (deep === void 0) {\n      deep = 1;\n    }\n\n    return this.stackCtrl.pop(deep, stackId);\n  };\n  /**\n   * Returns the URL of the active page of each stack.\n   */\n\n  /**\n   * Returns the URL of the active page of each stack.\n   * @param {?=} stackId\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.getLastUrl =\n  /**\n  * Returns the URL of the active page of each stack.\n  * @param {?=} stackId\n  * @return {?}\n  */\n  function (stackId) {\n    /** @type {?} */\n    var active = this.stackCtrl.getLastUrl(stackId);\n    return active ? active.url : undefined;\n  };\n  /**\n   * Returns the active stack ID. In the context of ion-tabs, it means the active tab.\n   */\n\n  /**\n   * Returns the active stack ID. In the context of ion-tabs, it means the active tab.\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.getActiveStackId =\n  /**\n  * Returns the active stack ID. In the context of ion-tabs, it means the active tab.\n  * @return {?}\n  */\n  function () {\n    return this.stackCtrl.getActiveStackId();\n  };\n  /**\n   * Since the activated route can change over the life time of a component in an ion router outlet, we create\n   * a proxy so that we can update the values over time as a user navigates back to components already in the stack.\n   */\n\n  /**\n   * Since the activated route can change over the life time of a component in an ion router outlet, we create\n   * a proxy so that we can update the values over time as a user navigates back to components already in the stack.\n   * @private\n   * @param {?} component$\n   * @param {?} activatedRoute\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.createActivatedRouteProxy =\n  /**\n  * Since the activated route can change over the life time of a component in an ion router outlet, we create\n  * a proxy so that we can update the values over time as a user navigates back to components already in the stack.\n  * @private\n  * @param {?} component$\n  * @param {?} activatedRoute\n  * @return {?}\n  */\n  function (component$, activatedRoute) {\n    /** @type {?} */\n    var proxy = new ActivatedRoute();\n    proxy._futureSnapshot =\n    /** @type {?} */\n    activatedRoute._futureSnapshot;\n    proxy._routerState =\n    /** @type {?} */\n    activatedRoute._routerState;\n    proxy.snapshot = activatedRoute.snapshot;\n    proxy.outlet = activatedRoute.outlet;\n    proxy.component = activatedRoute.component; // Setup wrappers for the observables so consumers don't have to worry about switching to new observables as the state updates\n\n    /** @type {?} */\n    proxy._paramMap = this.proxyObservable(component$, 'paramMap');\n\n    /** @type {?} */\n    proxy._queryParamMap = this.proxyObservable(component$, 'queryParamMap');\n    proxy.url = this.proxyObservable(component$, 'url');\n    proxy.params = this.proxyObservable(component$, 'params');\n    proxy.queryParams = this.proxyObservable(component$, 'queryParams');\n    proxy.fragment = this.proxyObservable(component$, 'fragment');\n    proxy.data = this.proxyObservable(component$, 'data');\n    return (\n      /** @type {?} */\n      proxy\n    );\n  };\n  /**\n   * Create a wrapped observable that will switch to the latest activated route matched by the given component\n   */\n\n  /**\n   * Create a wrapped observable that will switch to the latest activated route matched by the given component\n   * @private\n   * @param {?} component$\n   * @param {?} path\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.proxyObservable =\n  /**\n  * Create a wrapped observable that will switch to the latest activated route matched by the given component\n  * @private\n  * @param {?} component$\n  * @param {?} path\n  * @return {?}\n  */\n  function (component$, path) {\n    var _this = this;\n\n    return component$.pipe( // First wait until the component instance is pushed\n    filter(\n    /**\n    * @param {?} component\n    * @return {?}\n    */\n    function (component) {\n      return !!component;\n    }), switchMap(\n    /**\n    * @param {?} component\n    * @return {?}\n    */\n    function (component) {\n      return _this.currentActivatedRoute$.pipe(filter(\n      /**\n      * @param {?} current\n      * @return {?}\n      */\n      function (current) {\n        return current !== null && current.component === component;\n      }), switchMap(\n      /**\n      * @param {?} current\n      * @return {?}\n      */\n      function (current) {\n        return current &&\n        /** @type {?} */\n        current.activatedRoute[path];\n      }), distinctUntilChanged());\n    }));\n  };\n  /**\n   * Updates the activated route proxy for the given component to the new incoming router state\n   */\n\n  /**\n   * Updates the activated route proxy for the given component to the new incoming router state\n   * @private\n   * @param {?} component\n   * @param {?} activatedRoute\n   * @return {?}\n   */\n\n\n  IonRouterOutlet.prototype.updateActivatedRouteProxy =\n  /**\n  * Updates the activated route proxy for the given component to the new incoming router state\n  * @private\n  * @param {?} component\n  * @param {?} activatedRoute\n  * @return {?}\n  */\n  function (component, activatedRoute) {\n    /** @type {?} */\n    var proxy = this.proxyMap.get(component);\n\n    if (!proxy) {\n      throw new Error(\"Could not find activated route proxy for view\");\n    }\n\n    /** @type {?} */\n    proxy._futureSnapshot =\n    /** @type {?} */\n    activatedRoute._futureSnapshot;\n\n    /** @type {?} */\n    proxy._routerState =\n    /** @type {?} */\n    activatedRoute._routerState;\n    proxy.snapshot = activatedRoute.snapshot;\n    proxy.outlet = activatedRoute.outlet;\n    proxy.component = activatedRoute.component;\n    this.currentActivatedRoute$.next({\n      component: component,\n      activatedRoute: activatedRoute\n    });\n  };\n  /** @nocollapse */\n\n\n  IonRouterOutlet.ctorParameters = function () {\n    return [{\n      type: ChildrenOutletContexts\n    }, {\n      type: ViewContainerRef\n    }, {\n      type: ComponentFactoryResolver\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['name']\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Attribute,\n        args: ['tabs']\n      }]\n    }, {\n      type: Config\n    }, {\n      type: NavController\n    }, {\n      type: Location\n    }, {\n      type: ElementRef\n    }, {\n      type: Router\n    }, {\n      type: NgZone\n    }, {\n      type: ActivatedRoute\n    }, {\n      type: IonRouterOutlet,\n      decorators: [{\n        type: SkipSelf\n      }, {\n        type: Optional\n      }]\n    }];\n  };\n\n  IonRouterOutlet.propDecorators = {\n    stackEvents: [{\n      type: Output\n    }],\n    activateEvents: [{\n      type: Output,\n      args: ['activate']\n    }],\n    deactivateEvents: [{\n      type: Output,\n      args: ['deactivate']\n    }]\n  };\n\n  IonRouterOutlet.ɵfac = function IonRouterOutlet_Factory(t) {\n    return new (t || IonRouterOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ChildrenOutletContexts), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinjectAttribute('name'), ɵngcc0.ɵɵinjectAttribute('tabs'), ɵngcc0.ɵɵdirectiveInject(Config), ɵngcc0.ɵɵdirectiveInject(NavController), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Location), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(IonRouterOutlet, 12));\n  };\n\n  IonRouterOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: IonRouterOutlet,\n    selectors: [[\"ion-router-outlet\"]],\n    inputs: {\n      animated: \"animated\",\n      swipeGesture: \"swipeGesture\"\n    },\n    outputs: {\n      stackEvents: \"stackEvents\",\n      activateEvents: \"activate\",\n      deactivateEvents: \"deactivate\"\n    },\n    exportAs: [\"outlet\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonRouterOutlet;\n}();\n\nvar OutletInjector =\n/** @class */\nfunction () {\n  function OutletInjector(route, childContexts, parent) {\n    this.route = route;\n    this.childContexts = childContexts;\n    this.parent = parent;\n  }\n  /**\n   * @param {?} token\n   * @param {?=} notFoundValue\n   * @return {?}\n   */\n\n\n  OutletInjector.prototype.get =\n  /**\n  * @param {?} token\n  * @param {?=} notFoundValue\n  * @return {?}\n  */\n  function (token, notFoundValue) {\n    if (token === ActivatedRoute) {\n      return this.route;\n    }\n\n    if (token === ChildrenOutletContexts) {\n      return this.childContexts;\n    } // tslint:disable-next-line\n\n\n    return this.parent.get(token, notFoundValue);\n  };\n\n  return OutletInjector;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar IonTabs =\n/** @class */\nfunction () {\n  function IonTabs(navCtrl) {\n    this.navCtrl = navCtrl;\n    this.ionTabsWillChange = new EventEmitter();\n    this.ionTabsDidChange = new EventEmitter();\n  }\n  /**\n   * @internal\n   */\n\n  /**\n   * \\@internal\n   * @param {?} detail\n   * @return {?}\n   */\n\n\n  IonTabs.prototype.onPageSelected =\n  /**\n  * \\@internal\n  * @param {?} detail\n  * @return {?}\n  */\n  function (detail) {\n    /** @type {?} */\n    var stackId = detail.enteringView.stackId;\n\n    if (detail.tabSwitch && stackId !== undefined) {\n      if (this.tabBar) {\n        this.tabBar.selectedTab = stackId;\n      }\n\n      this.ionTabsWillChange.emit({\n        tab: stackId\n      });\n      this.ionTabsDidChange.emit({\n        tab: stackId\n      });\n    }\n  };\n  /**\n   * @param {?} tab\n   * @return {?}\n   */\n\n\n  IonTabs.prototype.select =\n  /**\n  * @param {?} tab\n  * @return {?}\n  */\n  function (tab) {\n    /** @type {?} */\n    var alreadySelected = this.outlet.getActiveStackId() === tab;\n    /** @type {?} */\n\n    var href = this.outlet.tabsPrefix + \"/\" + tab;\n    /** @type {?} */\n\n    var url = alreadySelected ? href : this.outlet.getLastUrl(tab) || href;\n    return this.navCtrl.navigateRoot(url, {\n      animated: true,\n      animationDirection: 'back'\n    });\n  };\n  /**\n   * @return {?}\n   */\n\n\n  IonTabs.prototype.getSelected =\n  /**\n  * @return {?}\n  */\n  function () {\n    return this.outlet.getActiveStackId();\n  };\n  /** @nocollapse */\n\n\n  IonTabs.ctorParameters = function () {\n    return [{\n      type: NavController\n    }];\n  };\n\n  IonTabs.propDecorators = {\n    outlet: [{\n      type: ViewChild,\n      args: ['outlet', {\n        read: IonRouterOutlet\n      }]\n    }],\n    tabBar: [{\n      type: ContentChild,\n      args: [IonTabBar]\n    }],\n    ionTabsWillChange: [{\n      type: Output\n    }],\n    ionTabsDidChange: [{\n      type: Output\n    }],\n    select: [{\n      type: HostListener,\n      args: ['ionTabButtonClick', ['$event.detail.tab']]\n    }]\n  };\n\n  IonTabs.ɵfac = function IonTabs_Factory(t) {\n    return new (t || IonTabs)(ɵngcc0.ɵɵdirectiveInject(NavController));\n  };\n\n  IonTabs.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonTabs,\n    selectors: [[\"ion-tabs\"]],\n    contentQueries: function IonTabs_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, IonTabBar, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabBar = _t.first);\n      }\n    },\n    viewQuery: function IonTabs_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, 5, IonRouterOutlet);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.outlet = _t.first);\n      }\n    },\n    hostBindings: function IonTabs_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"ionTabButtonClick\", function IonTabs_ionTabButtonClick_HostBindingHandler($event) {\n          return ctx.select($event.detail.tab);\n        });\n      }\n    },\n    outputs: {\n      ionTabsWillChange: \"ionTabsWillChange\",\n      ionTabsDidChange: \"ionTabsDidChange\"\n    },\n    ngContentSelectors: _c3,\n    decls: 5,\n    vars: 0,\n    consts: [[1, \"tabs-inner\"], [\"tabs\", \"true\", 3, \"stackEvents\"], [\"outlet\", \"\"]],\n    template: function IonTabs_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"ion-router-outlet\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"stackEvents\", function IonTabs_Template_ion_router_outlet_stackEvents_2_listener($event) {\n          return ctx.onPageSelected($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(4, 1);\n      }\n    },\n    directives: [IonRouterOutlet],\n    styles: [\"[_nghost-%COMP%] {\\n      display: flex;\\n      position: absolute;\\n      top: 0;\\n      left: 0;\\n      right: 0;\\n      bottom: 0;\\n\\n      flex-direction: column;\\n\\n      width: 100%;\\n      height: 100%;\\n\\n      contain: layout size style;\\n      z-index: $z-index-page-container;\\n    }\\n    .tabs-inner[_ngcontent-%COMP%] {\\n      position: relative;\\n\\n      flex: 1;\\n\\n      contain: layout size style;\\n    }\"]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonTabs;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar IonBackButtonDelegate =\n/** @class */\nfunction () {\n  function IonBackButtonDelegate(routerOutlet, navCtrl) {\n    this.routerOutlet = routerOutlet;\n    this.navCtrl = navCtrl;\n  }\n  /**\n   * @internal\n   */\n\n  /**\n   * \\@internal\n   * @param {?} ev\n   * @return {?}\n   */\n\n\n  IonBackButtonDelegate.prototype.onClick =\n  /**\n  * \\@internal\n  * @param {?} ev\n  * @return {?}\n  */\n  function (ev) {\n    if (this.routerOutlet && this.routerOutlet.canGoBack()) {\n      this.routerOutlet.pop();\n      ev.preventDefault();\n    } else if (this.defaultHref != null) {\n      this.navCtrl.navigateBack(this.defaultHref);\n      ev.preventDefault();\n    }\n  };\n  /** @nocollapse */\n\n\n  IonBackButtonDelegate.ctorParameters = function () {\n    return [{\n      type: IonRouterOutlet,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: NavController\n    }];\n  };\n\n  IonBackButtonDelegate.propDecorators = {\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  };\n\n  IonBackButtonDelegate.ɵfac = function IonBackButtonDelegate_Factory(t) {\n    return new (t || IonBackButtonDelegate)(ɵngcc0.ɵɵdirectiveInject(IonRouterOutlet, 8), ɵngcc0.ɵɵdirectiveInject(NavController));\n  };\n\n  IonBackButtonDelegate.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: IonBackButtonDelegate,\n    selectors: [[\"ion-back-button\"]],\n    hostBindings: function IonBackButtonDelegate_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function IonBackButtonDelegate_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n    },\n    inputs: {\n      defaultHref: \"defaultHref\"\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonBackButtonDelegate;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar NavDelegate =\n/** @class */\nfunction () {\n  function NavDelegate(ref, resolver, injector, angularDelegate, location) {\n    ref.nativeElement.delegate = angularDelegate.create(resolver, injector, location);\n  }\n  /** @nocollapse */\n\n\n  NavDelegate.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: ComponentFactoryResolver\n    }, {\n      type: Injector\n    }, {\n      type: AngularDelegate\n    }, {\n      type: ViewContainerRef\n    }];\n  };\n\n  NavDelegate.ɵfac = function NavDelegate_Factory(t) {\n    return new (t || NavDelegate)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(AngularDelegate), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  NavDelegate.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NavDelegate,\n    selectors: [[\"ion-nav\"]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return NavDelegate;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar RouterLinkDelegate =\n/** @class */\nfunction () {\n  function RouterLinkDelegate(locationStrategy, navCtrl, elementRef, router, routerLink) {\n    this.locationStrategy = locationStrategy;\n    this.navCtrl = navCtrl;\n    this.elementRef = elementRef;\n    this.router = router;\n    this.routerLink = routerLink;\n    this.routerDirection = 'forward';\n  }\n  /**\n   * @return {?}\n   */\n\n\n  RouterLinkDelegate.prototype.ngOnInit =\n  /**\n  * @return {?}\n  */\n  function () {\n    this.updateTargetUrlAndHref();\n  };\n  /**\n   * @return {?}\n   */\n\n\n  RouterLinkDelegate.prototype.ngOnChanges =\n  /**\n  * @return {?}\n  */\n  function () {\n    this.updateTargetUrlAndHref();\n  };\n  /**\n   * @return {?}\n   */\n\n\n  RouterLinkDelegate.prototype.ngOnDestroy =\n  /**\n  * @return {?}\n  */\n  function () {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  };\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  RouterLinkDelegate.prototype.updateTargetUrlAndHref =\n  /**\n  * @private\n  * @return {?}\n  */\n  function () {\n    if (this.routerLink) {\n      /** @type {?} */\n      var href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.routerLink.urlTree));\n      this.elementRef.nativeElement.href = href;\n    }\n  };\n  /**\n   * @internal\n   */\n\n  /**\n   * \\@internal\n   * @param {?} ev\n   * @return {?}\n   */\n\n\n  RouterLinkDelegate.prototype.onClick =\n  /**\n  * \\@internal\n  * @param {?} ev\n  * @return {?}\n  */\n  function (ev) {\n    this.navCtrl.setDirection(this.routerDirection);\n    ev.preventDefault();\n  };\n  /** @nocollapse */\n\n\n  RouterLinkDelegate.ctorParameters = function () {\n    return [{\n      type: LocationStrategy\n    }, {\n      type: NavController\n    }, {\n      type: ElementRef\n    }, {\n      type: Router\n    }, {\n      type: RouterLink,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  };\n\n  RouterLinkDelegate.propDecorators = {\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  };\n\n  RouterLinkDelegate.ɵfac = function RouterLinkDelegate_Factory(t) {\n    return new (t || RouterLinkDelegate)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocationStrategy), ɵngcc0.ɵɵdirectiveInject(NavController), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.RouterLink, 8));\n  };\n\n  RouterLinkDelegate.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: RouterLinkDelegate,\n    selectors: [[\"\", \"routerLink\", \"\"]],\n    hostBindings: function RouterLinkDelegate_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function RouterLinkDelegate_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n    },\n    inputs: {\n      routerDirection: \"routerDirection\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return RouterLinkDelegate;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @hidden\n */\n\n\nvar VirtualFooter =\n/** @class */\nfunction () {\n  function VirtualFooter(templateRef) {\n    this.templateRef = templateRef;\n  }\n  /** @nocollapse */\n\n\n  VirtualFooter.ctorParameters = function () {\n    return [{\n      type: TemplateRef\n    }];\n  };\n\n  VirtualFooter.ɵfac = function VirtualFooter_Factory(t) {\n    return new (t || VirtualFooter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  VirtualFooter.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: VirtualFooter,\n    selectors: [[\"\", \"virtualFooter\", \"\"]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return VirtualFooter;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @hidden\n */\n\n\nvar VirtualHeader =\n/** @class */\nfunction () {\n  function VirtualHeader(templateRef) {\n    this.templateRef = templateRef;\n  }\n  /** @nocollapse */\n\n\n  VirtualHeader.ctorParameters = function () {\n    return [{\n      type: TemplateRef\n    }];\n  };\n\n  VirtualHeader.ɵfac = function VirtualHeader_Factory(t) {\n    return new (t || VirtualHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  VirtualHeader.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: VirtualHeader,\n    selectors: [[\"\", \"virtualHeader\", \"\"]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return VirtualHeader;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @hidden\n */\n\n\nvar VirtualItem =\n/** @class */\nfunction () {\n  function VirtualItem(templateRef, viewContainer) {\n    this.templateRef = templateRef;\n    this.viewContainer = viewContainer;\n  }\n  /** @nocollapse */\n\n\n  VirtualItem.ctorParameters = function () {\n    return [{\n      type: TemplateRef\n    }, {\n      type: ViewContainerRef\n    }];\n  };\n\n  VirtualItem.ɵfac = function VirtualItem_Factory(t) {\n    return new (t || VirtualItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  VirtualItem.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: VirtualItem,\n    selectors: [[\"\", \"virtualItem\", \"\"]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return VirtualItem;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar IonVirtualScroll =\n/** @class */\nfunction () {\n  function IonVirtualScroll(z, iterableDiffers, elementRef) {\n    this.z = z;\n    this.iterableDiffers = iterableDiffers;\n    this.refMap = new WeakMap();\n    this.el =\n    /** @type {?} */\n    elementRef.nativeElement;\n    this.el.nodeRender = this.nodeRender.bind(this);\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n\n\n  IonVirtualScroll.prototype.ngOnChanges =\n  /**\n  * @param {?} changes\n  * @return {?}\n  */\n  function (changes) {\n    if (this.trackBy && 'items' in changes) {\n      // React on virtualScroll changes only once all inputs have been initialized\n\n      /** @type {?} */\n      var value = changes['items'].currentValue;\n\n      if (this.differ === undefined && value != null) {\n        try {\n          this.differ = this.iterableDiffers.find(value).create(this.trackBy);\n        } catch (e) {\n          throw new Error(\"Cannot find a differ supporting object '\" + value + \"'. VirtualScroll only supports binding to Iterables such as Arrays.\");\n        }\n      }\n    }\n  };\n  /**\n   * @return {?}\n   */\n\n\n  IonVirtualScroll.prototype.ngDoCheck =\n  /**\n  * @return {?}\n  */\n  function () {\n    // and if there actually are changes\n\n    /** @type {?} */\n    var changes = this.differ !== undefined && this.items ? this.differ.diff(this.items) : null;\n\n    if (changes === null) {\n      return;\n    } // TODO: optimize\n\n\n    this.checkRange(0);\n  };\n  /**\n   * @private\n   * @param {?} el\n   * @param {?} cell\n   * @param {?} index\n   * @return {?}\n   */\n\n\n  IonVirtualScroll.prototype.nodeRender =\n  /**\n  * @private\n  * @param {?} el\n  * @param {?} cell\n  * @param {?} index\n  * @return {?}\n  */\n  function (el, cell, index) {\n    var _this = this;\n\n    return this.z.run(\n    /**\n    * @return {?}\n    */\n    function () {\n      /** @type {?} */\n      var node;\n\n      if (!el) {\n        node = _this.itmTmp.viewContainer.createEmbeddedView(_this.getComponent(cell.type), {\n          $implicit: cell.value,\n          index: index\n        }, index);\n        el = getElement(node);\n\n        _this.refMap.set(el, node);\n      } else {\n        node =\n        /** @type {?} */\n        _this.refMap.get(el);\n        /** @type {?} */\n\n        var ctx = node.context;\n        ctx.$implicit = cell.value;\n        ctx.index = cell.index;\n      } // run sync change detections\n\n\n      node.detectChanges();\n      return el;\n    });\n  };\n  /**\n   * @private\n   * @param {?} type\n   * @return {?}\n   */\n\n\n  IonVirtualScroll.prototype.getComponent =\n  /**\n  * @private\n  * @param {?} type\n  * @return {?}\n  */\n  function (type) {\n    switch (type) {\n      case 'item':\n        return this.itmTmp.templateRef;\n\n      case 'header':\n        return this.hdrTmp.templateRef;\n\n      case 'footer':\n        return this.ftrTmp.templateRef;\n    }\n\n    throw new Error('template for virtual item was not provided');\n  };\n  /** @nocollapse */\n\n\n  IonVirtualScroll.ctorParameters = function () {\n    return [{\n      type: NgZone\n    }, {\n      type: IterableDiffers\n    }, {\n      type: ElementRef\n    }];\n  };\n\n  IonVirtualScroll.propDecorators = {\n    itmTmp: [{\n      type: ContentChild,\n      args: [VirtualItem]\n    }],\n    hdrTmp: [{\n      type: ContentChild,\n      args: [VirtualHeader]\n    }],\n    ftrTmp: [{\n      type: ContentChild,\n      args: [VirtualFooter]\n    }]\n  };\n\n  IonVirtualScroll.ɵfac = function IonVirtualScroll_Factory(t) {\n    return new (t || IonVirtualScroll)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  IonVirtualScroll.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: IonVirtualScroll,\n    selectors: [[\"ion-virtual-scroll\"]],\n    contentQueries: function IonVirtualScroll_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, VirtualItem, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, VirtualHeader, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, VirtualFooter, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itmTmp = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.hdrTmp = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ftrTmp = _t.first);\n      }\n    },\n    inputs: {\n      approxItemHeight: \"approxItemHeight\",\n      approxHeaderHeight: \"approxHeaderHeight\",\n      approxFooterHeight: \"approxFooterHeight\",\n      headerFn: \"headerFn\",\n      footerFn: \"footerFn\",\n      items: \"items\",\n      itemHeight: \"itemHeight\",\n      headerHeight: \"headerHeight\",\n      footerHeight: \"footerHeight\",\n      trackBy: \"trackBy\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function IonVirtualScroll_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return IonVirtualScroll;\n}();\n/** @type {?} */\n\n\nvar getElement =\n/**\n* @param {?} view\n* @return {?}\n*/\nfunction getElement(view) {\n  /** @type {?} */\n  var rootNodes = view.rootNodes;\n\n  for (var i = 0; i < rootNodes.length; i++) {\n    if (rootNodes[i].nodeType === 1) {\n      return rootNodes[i];\n    }\n  }\n\n  throw new Error('virtual element was not created');\n};\n\nproxyInputs(IonVirtualScroll, ['approxItemHeight', 'approxHeaderHeight', 'approxFooterHeight', 'headerFn', 'footerFn', 'items', 'itemHeight', 'headerHeight', 'footerHeight']);\nproxyMethods(IonVirtualScroll, ['checkEnd', 'checkRange', 'positionForItem']);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar CssUtilsDeprecations =\n/** @class */\nfunction () {\n  function CssUtilsDeprecations(ref) {\n    /** @type {?} */\n    var el =\n    /** @type {?} */\n    ref.nativeElement;\n    /** @type {?} */\n\n    var attributes = Array.from(el.attributes).map(\n    /**\n    * @param {?} a\n    * @return {?}\n    */\n    function (a) {\n      return a.name;\n    }).filter(\n    /**\n    * @param {?} n\n    * @return {?}\n    */\n    function (n) {\n      return DEPRECATED_ATTRIBUTES.includes(n);\n    });\n\n    if (attributes.length > 0) {\n      console.warn(\"[DEPRECATED][CSS] Ionic CSS attributes are deprecated.\\nReplace:\\n'<\" + el.tagName.toLowerCase() + \" \" + attributes.map(\n      /**\n      * @param {?} n\n      * @return {?}\n      */\n      function (n) {\n        return \"\" + n;\n      }).join(' ') + \">'\\n\\nWith:\\n'<\" + el.tagName.toLowerCase() + \" class=\\\"\" + attributes.map(\n      /**\n      * @param {?} n\n      * @return {?}\n      */\n      function (n) {\n        return \"ion-\" + n;\n      }).join(' ') + \"\\\">'\\n      \");\n    }\n  }\n  /** @nocollapse */\n\n\n  CssUtilsDeprecations.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }];\n  };\n\n  CssUtilsDeprecations.ɵfac = function CssUtilsDeprecations_Factory(t) {\n    return new (t || CssUtilsDeprecations)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CssUtilsDeprecations.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CssUtilsDeprecations,\n    selectors: [[\"\", \"align-self-start\", \"\"], [\"\", \"align-self-end\", \"\"], [\"\", \"align-self-center\", \"\"], [\"\", \"align-self-stretch\", \"\"], [\"\", \"align-self-baseline\", \"\"], [\"\", \"align-self-auto\", \"\"], [\"\", \"wrap-reverse\", \"\"], [\"\", \"justify-content-start\", \"\"], [\"\", \"justify-content-center\", \"\"], [\"\", \"justify-content-end\", \"\"], [\"\", \"justify-content-around\", \"\"], [\"\", \"justify-content-between\", \"\"], [\"\", \"justify-content-evenly\", \"\"], [\"\", \"align-items-start\", \"\"], [\"\", \"align-items-center\", \"\"], [\"\", \"align-items-end\", \"\"], [\"\", \"align-items-stretch\", \"\"], [\"\", \"align-items-baseline\", \"\"], [\"\", \"float-left\", \"\"], [\"\", \"float-right\", \"\"], [\"\", \"float-start\", \"\"], [\"\", \"float-end\", \"\"], [\"\", \"float-sm-left\", \"\"], [\"\", \"float-sm-right\", \"\"], [\"\", \"float-sm-start\", \"\"], [\"\", \"float-sm-end\", \"\"], [\"\", \"float-md-left\", \"\"], [\"\", \"float-md-right\", \"\"], [\"\", \"float-md-start\", \"\"], [\"\", \"float-md-end\", \"\"], [\"\", \"float-lg-left\", \"\"], [\"\", \"float-lg-right\", \"\"], [\"\", \"float-lg-start\", \"\"], [\"\", \"float-lg-end\", \"\"], [\"\", \"float-xl-left\", \"\"], [\"\", \"float-xl-right\", \"\"], [\"\", \"float-xl-start\", \"\"], [\"\", \"float-xl-end\", \"\"], [\"\", \"text-center\", \"\"], [\"\", \"text-justify\", \"\"], [\"\", \"text-start\", \"\"], [\"\", \"text-end\", \"\"], [\"\", \"text-left\", \"\"], [\"\", \"text-right\", \"\"], [\"\", \"text-nowrap\", \"\"], [\"\", \"text-wrap\", \"\"], [\"\", \"text-sm-center\", \"\"], [\"\", \"text-sm-justify\", \"\"], [\"\", \"text-sm-start\", \"\"], [\"\", \"text-sm-end\", \"\"], [\"\", \"text-sm-left\", \"\"], [\"\", \"text-sm-right\", \"\"], [\"\", \"text-sm-nowrap\", \"\"], [\"\", \"text-sm-wrap\", \"\"], [\"\", \"text-md-center\", \"\"], [\"\", \"text-md-justify\", \"\"], [\"\", \"text-md-start\", \"\"], [\"\", \"text-md-end\", \"\"], [\"\", \"text-md-left\", \"\"], [\"\", \"text-md-right\", \"\"], [\"\", \"text-md-nowrap\", \"\"], [\"\", \"text-md-wrap\", \"\"], [\"\", \"text-lg-center\", \"\"], [\"\", \"text-lg-justify\", \"\"], [\"\", \"text-lg-start\", \"\"], [\"\", \"text-lg-end\", \"\"], [\"\", \"text-lg-left\", \"\"], [\"\", \"text-lg-right\", \"\"], [\"\", \"text-lg-nowrap\", \"\"], [\"\", \"text-lg-wrap\", \"\"], [\"\", \"text-xl-center\", \"\"], [\"\", \"text-xl-justify\", \"\"], [\"\", \"text-xl-start\", \"\"], [\"\", \"text-xl-end\", \"\"], [\"\", \"text-xl-left\", \"\"], [\"\", \"text-xl-right\", \"\"], [\"\", \"text-xl-nowrap\", \"\"], [\"\", \"text-xl-wrap\", \"\"], [\"\", \"text-uppercase\", \"\"], [\"\", \"text-lowercase\", \"\"], [\"\", \"text-capitalize\", \"\"], [\"\", \"text-sm-uppercase\", \"\"], [\"\", \"text-sm-lowercase\", \"\"], [\"\", \"text-sm-capitalize\", \"\"], [\"\", \"text-md-uppercase\", \"\"], [\"\", \"text-md-lowercase\", \"\"], [\"\", \"text-md-capitalize\", \"\"], [\"\", \"text-lg-uppercase\", \"\"], [\"\", \"text-lg-lowercase\", \"\"], [\"\", \"text-lg-capitalize\", \"\"], [\"\", \"text-xl-uppercase\", \"\"], [\"\", \"text-xl-lowercase\", \"\"], [\"\", \"text-xl-capitalize\", \"\"], [\"\", \"no-padding\", \"\"], [\"\", \"padding\", \"\"], [\"\", \"padding-top\", \"\"], [\"\", \"padding-bottom\", \"\"], [\"\", \"padding-start\", \"\"], [\"\", \"padding-end\", \"\"], [\"\", \"padding-vertical\", \"\"], [\"\", \"padding-horizontal\", \"\"], [\"\", \"no-margin\", \"\"], [\"\", \"margin\", \"\"], [\"\", \"margin-top\", \"\"], [\"\", \"margin-bottom\", \"\"], [\"\", \"margin-start\", \"\"], [\"\", \"margin-end\", \"\"], [\"\", \"margin-vertical\", \"\"], [\"\", \"margin-horizontal\", \"\"]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return CssUtilsDeprecations;\n}();\n/** @type {?} */\n\n\nvar DEPRECATED_ATTRIBUTES = ['align-self-start', 'align-self-end', 'align-self-center', 'align-self-stretch', 'align-self-baseline', 'align-self-auto', 'wrap-reverse', 'justify-content-start', 'justify-content-center', 'justify-content-end', 'justify-content-around', 'justify-content-between', 'justify-content-evenly', 'align-items-start', 'align-items-center', 'align-items-end', 'align-items-stretch', 'align-items-baseline', 'float-left', 'float-right', 'float-start', 'float-end', 'float-sm-left', 'float-sm-right', 'float-sm-start', 'float-sm-end', 'float-md-left', 'float-md-right', 'float-md-start', 'float-md-end', 'float-lg-left', 'float-lg-right', 'float-lg-start', 'float-lg-end', 'float-xl-left', 'float-xl-right', 'float-xl-start', 'float-xl-end', 'text-center', 'text-justify', 'text-start', 'text-end', 'text-left', 'text-right', 'text-nowrap', 'text-wrap', 'text-sm-center', 'text-sm-justify', 'text-sm-start', 'text-sm-end', 'text-sm-left', 'text-sm-right', 'text-sm-nowrap', 'text-sm-wrap', 'text-md-center', 'text-md-justify', 'text-md-start', 'text-md-end', 'text-md-left', 'text-md-right', 'text-md-nowrap', 'text-md-wrap', 'text-lg-center', 'text-lg-justify', 'text-lg-start', 'text-lg-end', 'text-lg-left', 'text-lg-right', 'text-lg-nowrap', 'text-lg-wrap', 'text-xl-center', 'text-xl-justify', 'text-xl-start', 'text-xl-end', 'text-xl-left', 'text-xl-right', 'text-xl-nowrap', 'text-xl-wrap', 'text-uppercase', 'text-lowercase', 'text-capitalize', 'text-sm-uppercase', 'text-sm-lowercase', 'text-sm-capitalize', 'text-md-uppercase', 'text-md-lowercase', 'text-md-capitalize', 'text-lg-uppercase', 'text-lg-lowercase', 'text-lg-capitalize', 'text-xl-uppercase', 'text-xl-lowercase', 'text-xl-capitalize', 'no-padding', 'padding', 'padding-top', 'padding-bottom', 'padding-start', 'padding-end', 'padding-vertical', 'padding-horizontal', 'no-margin', 'margin', 'margin-top', 'margin-bottom', 'margin-start', 'margin-end', 'margin-vertical', 'margin-horizontal'];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @template Opts, Overlay\n */\n\nvar\n/**\n* @template Opts, Overlay\n*/\nOverlayBaseController =\n/** @class */\nfunction () {\n  function OverlayBaseController(ctrl) {\n    this.ctrl = ctrl;\n  }\n  /**\n   * Creates a new overlay\n   */\n\n  /**\n   * Creates a new overlay\n   * @param {?=} opts\n   * @return {?}\n   */\n\n\n  OverlayBaseController.prototype.create =\n  /**\n  * Creates a new overlay\n  * @param {?=} opts\n  * @return {?}\n  */\n  function (opts) {\n    // TODO: next major release opts is not optional\n    return this.ctrl.create(\n    /** @type {?} */\n    opts || {});\n  };\n  /**\n   * When `id` is not provided, it dismisses the top overlay.\n   */\n\n  /**\n   * When `id` is not provided, it dismisses the top overlay.\n   * @param {?=} data\n   * @param {?=} role\n   * @param {?=} id\n   * @return {?}\n   */\n\n\n  OverlayBaseController.prototype.dismiss =\n  /**\n  * When `id` is not provided, it dismisses the top overlay.\n  * @param {?=} data\n  * @param {?=} role\n  * @param {?=} id\n  * @return {?}\n  */\n  function (data, role, id) {\n    return this.ctrl.dismiss(data, role, id);\n  };\n  /**\n   * Returns the top overlay.\n   */\n\n  /**\n   * Returns the top overlay.\n   * @return {?}\n   */\n\n\n  OverlayBaseController.prototype.getTop =\n  /**\n  * Returns the top overlay.\n  * @return {?}\n  */\n  function () {\n    return this.ctrl.getTop();\n  };\n\n  return OverlayBaseController;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ActionSheetController =\n/** @class */\nfunction (_super) {\n  __extends(ActionSheetController, _super);\n\n  function ActionSheetController() {\n    return _super.call(this, actionSheetController) || this;\n  }\n  /** @nocollapse */\n\n\n  ActionSheetController.ctorParameters = function () {\n    return [];\n  };\n  /** @nocollapse */\n\n\n  ActionSheetController.ngInjectableDef = defineInjectable({\n    factory: function ActionSheetController_Factory() {\n      return new ActionSheetController();\n    },\n    token: ActionSheetController,\n    providedIn: \"root\"\n  });\n\n  ActionSheetController.ɵfac = function ActionSheetController_Factory(t) {\n    return new (t || ActionSheetController)();\n  };\n\n  ActionSheetController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ActionSheetController,\n    factory: function factory(t) {\n      return ActionSheetController.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return ActionSheetController;\n}(OverlayBaseController);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar AlertController =\n/** @class */\nfunction (_super) {\n  __extends(AlertController, _super);\n\n  function AlertController() {\n    return _super.call(this, alertController) || this;\n  }\n  /** @nocollapse */\n\n\n  AlertController.ctorParameters = function () {\n    return [];\n  };\n  /** @nocollapse */\n\n\n  AlertController.ngInjectableDef = defineInjectable({\n    factory: function AlertController_Factory() {\n      return new AlertController();\n    },\n    token: AlertController,\n    providedIn: \"root\"\n  });\n\n  AlertController.ɵfac = function AlertController_Factory(t) {\n    return new (t || AlertController)();\n  };\n\n  AlertController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: AlertController,\n    factory: function factory(t) {\n      return AlertController.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return AlertController;\n}(OverlayBaseController);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar Events =\n/** @class */\nfunction () {\n  function Events() {\n    this.c = new Map();\n    console.warn(\"[DEPRECATION][Events]: The Events provider is deprecated and it will be removed in the next major release.\\n  - Use \\\"Observables\\\" for a similar pub/sub architecture: https://angular.io/guide/observables\\n  - Use \\\"Redux\\\" for advanced state management: https://ngrx.io\");\n  }\n  /**\n   * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.\n   *\n   * @param topic the topic to subscribe to\n   * @param handler the event handler\n   */\n\n  /**\n   * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.\n   *\n   * @param {?} topic the topic to subscribe to\n   * @param {...?} handlers\n   * @return {?}\n   */\n\n\n  Events.prototype.subscribe =\n  /**\n  * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.\n  *\n  * @param {?} topic the topic to subscribe to\n  * @param {...?} handlers\n  * @return {?}\n  */\n  function (topic) {\n    var handlers = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      handlers[_i - 1] = arguments[_i];\n    }\n    /** @type {?} */\n\n\n    var topics = this.c.get(topic);\n\n    if (!topics) {\n      this.c.set(topic, topics = []);\n    }\n\n    topics.push.apply(topics, handlers);\n  };\n  /**\n   * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.\n   *\n   * @param topic the topic to unsubscribe from\n   * @param handler the event handler\n   *\n   * @return true if a handler was removed\n   */\n\n  /**\n   * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.\n   *\n   * @param {?} topic the topic to unsubscribe from\n   * @param {?=} handler the event handler\n   *\n   * @return {?} true if a handler was removed\n   */\n\n\n  Events.prototype.unsubscribe =\n  /**\n  * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.\n  *\n  * @param {?} topic the topic to unsubscribe from\n  * @param {?=} handler the event handler\n  *\n  * @return {?} true if a handler was removed\n  */\n  function (topic, handler) {\n    if (!handler) {\n      return this.c.delete(topic);\n    }\n    /** @type {?} */\n\n\n    var topics = this.c.get(topic);\n\n    if (!topics) {\n      return false;\n    } // We need to find and remove a specific handler\n\n    /** @type {?} */\n\n\n    var index = topics.indexOf(handler);\n\n    if (index < 0) {\n      // Wasn't found, wasn't removed\n      return false;\n    }\n\n    topics.splice(index, 1);\n\n    if (topics.length === 0) {\n      this.c.delete(topic);\n    }\n\n    return true;\n  };\n  /**\n   * Publish an event to the given topic.\n   *\n   * @param topic the topic to publish to\n   * @param eventData the data to send as the event\n   */\n\n  /**\n   * Publish an event to the given topic.\n   *\n   * @param {?} topic the topic to publish to\n   * @param {...?} args\n   * @return {?}\n   */\n\n\n  Events.prototype.publish =\n  /**\n  * Publish an event to the given topic.\n  *\n  * @param {?} topic the topic to publish to\n  * @param {...?} args\n  * @return {?}\n  */\n  function (topic) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    /** @type {?} */\n\n\n    var topics = this.c.get(topic);\n\n    if (!topics) {\n      return null;\n    }\n\n    return topics.map(\n    /**\n    * @param {?} handler\n    * @return {?}\n    */\n    function (handler) {\n      try {\n        return handler.apply(void 0, args);\n      } catch (e) {\n        console.error(e);\n        return null;\n      }\n    });\n  };\n  /** @nocollapse */\n\n\n  Events.ctorParameters = function () {\n    return [];\n  };\n  /** @nocollapse */\n\n\n  Events.ngInjectableDef = defineInjectable({\n    factory: function Events_Factory() {\n      return new Events();\n    },\n    token: Events,\n    providedIn: \"root\"\n  });\n\n  Events.ɵfac = function Events_Factory(t) {\n    return new (t || Events)();\n  };\n\n  Events.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Events,\n    factory: function factory(t) {\n      return Events.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return Events;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar LoadingController =\n/** @class */\nfunction (_super) {\n  __extends(LoadingController, _super);\n\n  function LoadingController() {\n    return _super.call(this, loadingController) || this;\n  }\n  /** @nocollapse */\n\n\n  LoadingController.ctorParameters = function () {\n    return [];\n  };\n  /** @nocollapse */\n\n\n  LoadingController.ngInjectableDef = defineInjectable({\n    factory: function LoadingController_Factory() {\n      return new LoadingController();\n    },\n    token: LoadingController,\n    providedIn: \"root\"\n  });\n\n  LoadingController.ɵfac = function LoadingController_Factory(t) {\n    return new (t || LoadingController)();\n  };\n\n  LoadingController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: LoadingController,\n    factory: function factory(t) {\n      return LoadingController.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return LoadingController;\n}(OverlayBaseController);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MenuController =\n/** @class */\nfunction () {\n  function MenuController() {}\n  /**\n   * Programmatically open the Menu.\n   * @param [menuId]  Optionally get the menu by its id, or side.\n   * @return returns a promise when the menu is fully opened\n   */\n\n  /**\n   * Programmatically open the Menu.\n   * @param {?=} menuId\n   * @return {?} returns a promise when the menu is fully opened\n   */\n\n\n  MenuController.prototype.open =\n  /**\n  * Programmatically open the Menu.\n  * @param {?=} menuId\n  * @return {?} returns a promise when the menu is fully opened\n  */\n  function (menuId) {\n    return menuController.open(menuId);\n  };\n  /**\n   * Programmatically close the Menu. If no `menuId` is given as the first\n   * argument then it'll close any menu which is open. If a `menuId`\n   * is given then it'll close that exact menu.\n   * @param [menuId]  Optionally get the menu by its id, or side.\n   * @return returns a promise when the menu is fully closed\n   */\n\n  /**\n   * Programmatically close the Menu. If no `menuId` is given as the first\n   * argument then it'll close any menu which is open. If a `menuId`\n   * is given then it'll close that exact menu.\n   * @param {?=} menuId\n   * @return {?} returns a promise when the menu is fully closed\n   */\n\n\n  MenuController.prototype.close =\n  /**\n  * Programmatically close the Menu. If no `menuId` is given as the first\n  * argument then it'll close any menu which is open. If a `menuId`\n  * is given then it'll close that exact menu.\n  * @param {?=} menuId\n  * @return {?} returns a promise when the menu is fully closed\n  */\n  function (menuId) {\n    return menuController.close(menuId);\n  };\n  /**\n   * Toggle the menu. If it's closed, it will open, and if opened, it\n   * will close.\n   * @param [menuId]  Optionally get the menu by its id, or side.\n   * @return returns a promise when the menu has been toggled\n   */\n\n  /**\n   * Toggle the menu. If it's closed, it will open, and if opened, it\n   * will close.\n   * @param {?=} menuId\n   * @return {?} returns a promise when the menu has been toggled\n   */\n\n\n  MenuController.prototype.toggle =\n  /**\n  * Toggle the menu. If it's closed, it will open, and if opened, it\n  * will close.\n  * @param {?=} menuId\n  * @return {?} returns a promise when the menu has been toggled\n  */\n  function (menuId) {\n    return menuController.toggle(menuId);\n  };\n  /**\n   * Used to enable or disable a menu. For example, there could be multiple\n   * left menus, but only one of them should be able to be opened at the same\n   * time. If there are multiple menus on the same side, then enabling one menu\n   * will also automatically disable all the others that are on the same side.\n   * @param [menuId]  Optionally get the menu by its id, or side.\n   * @return Returns the instance of the menu, which is useful for chaining.\n   */\n\n  /**\n   * Used to enable or disable a menu. For example, there could be multiple\n   * left menus, but only one of them should be able to be opened at the same\n   * time. If there are multiple menus on the same side, then enabling one menu\n   * will also automatically disable all the others that are on the same side.\n   * @param {?} shouldEnable\n   * @param {?=} menuId\n   * @return {?} Returns the instance of the menu, which is useful for chaining.\n   */\n\n\n  MenuController.prototype.enable =\n  /**\n  * Used to enable or disable a menu. For example, there could be multiple\n  * left menus, but only one of them should be able to be opened at the same\n  * time. If there are multiple menus on the same side, then enabling one menu\n  * will also automatically disable all the others that are on the same side.\n  * @param {?} shouldEnable\n  * @param {?=} menuId\n  * @return {?} Returns the instance of the menu, which is useful for chaining.\n  */\n  function (shouldEnable, menuId) {\n    return menuController.enable(shouldEnable, menuId);\n  };\n  /**\n   * Used to enable or disable the ability to swipe open the menu.\n   * @param shouldEnable  True if it should be swipe-able, false if not.\n   * @param [menuId]  Optionally get the menu by its id, or side.\n   * @return Returns the instance of the menu, which is useful for chaining.\n   * @deprecated Use swipeGesture() instead.\n   */\n\n  /**\n   * Used to enable or disable the ability to swipe open the menu.\n   * @deprecated Use swipeGesture() instead.\n   * @param {?} shouldEnable  True if it should be swipe-able, false if not.\n   * @param {?=} menuId\n   * @return {?} Returns the instance of the menu, which is useful for chaining.\n   */\n\n\n  MenuController.prototype.swipeEnable =\n  /**\n  * Used to enable or disable the ability to swipe open the menu.\n  * @deprecated Use swipeGesture() instead.\n  * @param {?} shouldEnable  True if it should be swipe-able, false if not.\n  * @param {?=} menuId\n  * @return {?} Returns the instance of the menu, which is useful for chaining.\n  */\n  function (shouldEnable, menuId) {\n    console.warn('[DEPRECATED][ion-menu-controller] swipeEnable() is deprecated. Use MenuController.swipeGesture() instead');\n    return this.swipeGesture(shouldEnable, menuId);\n  };\n  /**\n   * Used to enable or disable the ability to swipe open the menu.\n   * @param shouldEnable  True if it should be swipe-able, false if not.\n   * @param [menuId]  Optionally get the menu by its id, or side.\n   * @return Returns the instance of the menu, which is useful for chaining.\n   */\n\n  /**\n   * Used to enable or disable the ability to swipe open the menu.\n   * @param {?} shouldEnable  True if it should be swipe-able, false if not.\n   * @param {?=} menuId\n   * @return {?} Returns the instance of the menu, which is useful for chaining.\n   */\n\n\n  MenuController.prototype.swipeGesture =\n  /**\n  * Used to enable or disable the ability to swipe open the menu.\n  * @param {?} shouldEnable  True if it should be swipe-able, false if not.\n  * @param {?=} menuId\n  * @return {?} Returns the instance of the menu, which is useful for chaining.\n  */\n  function (shouldEnable, menuId) {\n    return menuController.swipeGesture(shouldEnable, menuId);\n  };\n  /**\n   * @param [menuId] Optionally get the menu by its id, or side.\n   * @return Returns true if the specified menu is currently open, otherwise false.\n   * If the menuId is not specified, it returns true if ANY menu is currenly open.\n   */\n\n  /**\n   * @param {?=} menuId\n   * @return {?} Returns true if the specified menu is currently open, otherwise false.\n   * If the menuId is not specified, it returns true if ANY menu is currenly open.\n   */\n\n\n  MenuController.prototype.isOpen =\n  /**\n  * @param {?=} menuId\n  * @return {?} Returns true if the specified menu is currently open, otherwise false.\n  * If the menuId is not specified, it returns true if ANY menu is currenly open.\n  */\n  function (menuId) {\n    return menuController.isOpen(menuId);\n  };\n  /**\n   * @param [menuId]  Optionally get the menu by its id, or side.\n   * @return Returns true if the menu is currently enabled, otherwise false.\n   */\n\n  /**\n   * @param {?=} menuId\n   * @return {?} Returns true if the menu is currently enabled, otherwise false.\n   */\n\n\n  MenuController.prototype.isEnabled =\n  /**\n  * @param {?=} menuId\n  * @return {?} Returns true if the menu is currently enabled, otherwise false.\n  */\n  function (menuId) {\n    return menuController.isEnabled(menuId);\n  };\n  /**\n   * Used to get a menu instance. If a `menuId` is not provided then it'll\n   * return the first menu found. If a `menuId` is `left` or `right`, then\n   * it'll return the enabled menu on that side. Otherwise, if a `menuId` is\n   * provided, then it'll try to find the menu using the menu's `id`\n   * property. If a menu is not found then it'll return `null`.\n   * @param [menuId]  Optionally get the menu by its id, or side.\n   * @return Returns the instance of the menu if found, otherwise `null`.\n   */\n\n  /**\n   * Used to get a menu instance. If a `menuId` is not provided then it'll\n   * return the first menu found. If a `menuId` is `left` or `right`, then\n   * it'll return the enabled menu on that side. Otherwise, if a `menuId` is\n   * provided, then it'll try to find the menu using the menu's `id`\n   * property. If a menu is not found then it'll return `null`.\n   * @param {?=} menuId\n   * @return {?} Returns the instance of the menu if found, otherwise `null`.\n   */\n\n\n  MenuController.prototype.get =\n  /**\n  * Used to get a menu instance. If a `menuId` is not provided then it'll\n  * return the first menu found. If a `menuId` is `left` or `right`, then\n  * it'll return the enabled menu on that side. Otherwise, if a `menuId` is\n  * provided, then it'll try to find the menu using the menu's `id`\n  * property. If a menu is not found then it'll return `null`.\n  * @param {?=} menuId\n  * @return {?} Returns the instance of the menu if found, otherwise `null`.\n  */\n  function (menuId) {\n    return menuController.get(menuId);\n  };\n  /**\n   * @return Returns the instance of the menu already opened, otherwise `null`.\n   */\n\n  /**\n   * @return {?} Returns the instance of the menu already opened, otherwise `null`.\n   */\n\n\n  MenuController.prototype.getOpen =\n  /**\n  * @return {?} Returns the instance of the menu already opened, otherwise `null`.\n  */\n  function () {\n    return menuController.getOpen();\n  };\n  /**\n   * @return Returns an array of all menu instances.\n   */\n\n  /**\n   * @return {?} Returns an array of all menu instances.\n   */\n\n\n  MenuController.prototype.getMenus =\n  /**\n  * @return {?} Returns an array of all menu instances.\n  */\n  function () {\n    return menuController.getMenus();\n  };\n  /** @nocollapse */\n\n\n  MenuController.ngInjectableDef = defineInjectable({\n    factory: function MenuController_Factory() {\n      return new MenuController();\n    },\n    token: MenuController,\n    providedIn: \"root\"\n  });\n\n  MenuController.ɵfac = function MenuController_Factory(t) {\n    return new (t || MenuController)();\n  };\n\n  MenuController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MenuController,\n    factory: function factory(t) {\n      return MenuController.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return MenuController;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar PickerController =\n/** @class */\nfunction (_super) {\n  __extends(PickerController, _super);\n\n  function PickerController() {\n    return _super.call(this, pickerController) || this;\n  }\n  /** @nocollapse */\n\n\n  PickerController.ctorParameters = function () {\n    return [];\n  };\n  /** @nocollapse */\n\n\n  PickerController.ngInjectableDef = defineInjectable({\n    factory: function PickerController_Factory() {\n      return new PickerController();\n    },\n    token: PickerController,\n    providedIn: \"root\"\n  });\n\n  PickerController.ɵfac = function PickerController_Factory(t) {\n    return new (t || PickerController)();\n  };\n\n  PickerController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: PickerController,\n    factory: function factory(t) {\n      return PickerController.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return PickerController;\n}(OverlayBaseController);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ModalController =\n/** @class */\nfunction (_super) {\n  __extends(ModalController, _super);\n\n  function ModalController(angularDelegate, resolver, injector) {\n    var _this = _super.call(this, modalController) || this;\n\n    _this.angularDelegate = angularDelegate;\n    _this.resolver = resolver;\n    _this.injector = injector;\n    return _this;\n  }\n  /**\n   * @param {?} opts\n   * @return {?}\n   */\n\n\n  ModalController.prototype.create =\n  /**\n  * @param {?} opts\n  * @return {?}\n  */\n  function (opts) {\n    return _super.prototype.create.call(this, __assign({}, opts, {\n      delegate: this.angularDelegate.create(this.resolver, this.injector)\n    }));\n  };\n  /** @nocollapse */\n\n\n  ModalController.ctorParameters = function () {\n    return [{\n      type: AngularDelegate\n    }, {\n      type: ComponentFactoryResolver\n    }, {\n      type: Injector\n    }];\n  };\n\n  ModalController.ɵfac = function ModalController_Factory(t) {\n    return new (t || ModalController)(ɵngcc0.ɵɵinject(AngularDelegate), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n  };\n\n  ModalController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ModalController,\n    factory: function factory(t) {\n      return ModalController.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return ModalController;\n}(OverlayBaseController);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar PopoverController =\n/** @class */\nfunction (_super) {\n  __extends(PopoverController, _super);\n\n  function PopoverController(angularDelegate, resolver, injector) {\n    var _this = _super.call(this, popoverController) || this;\n\n    _this.angularDelegate = angularDelegate;\n    _this.resolver = resolver;\n    _this.injector = injector;\n    return _this;\n  }\n  /**\n   * @param {?} opts\n   * @return {?}\n   */\n\n\n  PopoverController.prototype.create =\n  /**\n  * @param {?} opts\n  * @return {?}\n  */\n  function (opts) {\n    return _super.prototype.create.call(this, __assign({}, opts, {\n      delegate: this.angularDelegate.create(this.resolver, this.injector)\n    }));\n  };\n  /** @nocollapse */\n\n\n  PopoverController.ctorParameters = function () {\n    return [{\n      type: AngularDelegate\n    }, {\n      type: ComponentFactoryResolver\n    }, {\n      type: Injector\n    }];\n  };\n\n  PopoverController.ɵfac = function PopoverController_Factory(t) {\n    return new (t || PopoverController)(ɵngcc0.ɵɵinject(AngularDelegate), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n  };\n\n  PopoverController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: PopoverController,\n    factory: function factory(t) {\n      return PopoverController.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return PopoverController;\n}(OverlayBaseController);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar ToastController =\n/** @class */\nfunction (_super) {\n  __extends(ToastController, _super);\n\n  function ToastController() {\n    return _super.call(this, toastController) || this;\n  }\n  /** @nocollapse */\n\n\n  ToastController.ctorParameters = function () {\n    return [];\n  };\n  /** @nocollapse */\n\n\n  ToastController.ngInjectableDef = defineInjectable({\n    factory: function ToastController_Factory() {\n      return new ToastController();\n    },\n    token: ToastController,\n    providedIn: \"root\"\n  });\n\n  ToastController.ɵfac = function ToastController_Factory(t) {\n    return new (t || ToastController)();\n  };\n\n  ToastController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ToastController,\n    factory: function factory(t) {\n      return ToastController.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return ToastController;\n}(OverlayBaseController);\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar DomController =\n/** @class */\nfunction () {\n  function DomController() {}\n  /**\n   * Schedules a task to run during the READ phase of the next frame.\n   * This task should only read the DOM, but never modify it.\n   */\n\n  /**\n   * Schedules a task to run during the READ phase of the next frame.\n   * This task should only read the DOM, but never modify it.\n   * @param {?} cb\n   * @return {?}\n   */\n\n\n  DomController.prototype.read =\n  /**\n  * Schedules a task to run during the READ phase of the next frame.\n  * This task should only read the DOM, but never modify it.\n  * @param {?} cb\n  * @return {?}\n  */\n  function (cb) {\n    getQueue().read(cb);\n  };\n  /**\n   * Schedules a task to run during the WRITE phase of the next frame.\n   * This task should write the DOM, but never READ it.\n   */\n\n  /**\n   * Schedules a task to run during the WRITE phase of the next frame.\n   * This task should write the DOM, but never READ it.\n   * @param {?} cb\n   * @return {?}\n   */\n\n\n  DomController.prototype.write =\n  /**\n  * Schedules a task to run during the WRITE phase of the next frame.\n  * This task should write the DOM, but never READ it.\n  * @param {?} cb\n  * @return {?}\n  */\n  function (cb) {\n    getQueue().write(cb);\n  };\n  /** @nocollapse */\n\n\n  DomController.ngInjectableDef = defineInjectable({\n    factory: function DomController_Factory() {\n      return new DomController();\n    },\n    token: DomController,\n    providedIn: \"root\"\n  });\n\n  DomController.ɵfac = function DomController_Factory(t) {\n    return new (t || DomController)();\n  };\n\n  DomController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DomController,\n    factory: function factory(t) {\n      return DomController.ɵfac(t);\n    },\n    providedIn: 'root'\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return DomController;\n}();\n/** @type {?} */\n\n\nvar getQueue =\n/**\n* @return {?}\n*/\nfunction getQueue() {\n  /** @type {?} */\n  var win = typeof\n  /** @type {?} */\n  window !== 'undefined' ? window :\n  /** @type {?} */\n  null;\n\n  if (win != null) {\n    /** @type {?} */\n    var Ionic = win.Ionic;\n\n    if (Ionic && Ionic.queue) {\n      return Ionic.queue;\n    }\n\n    return {\n      read:\n      /**\n      * @param {?} cb\n      * @return {?}\n      */\n      function read(cb) {\n        return win.requestAnimationFrame(cb);\n      },\n      write:\n      /**\n      * @param {?} cb\n      * @return {?}\n      */\n      function write(cb) {\n        return win.requestAnimationFrame(cb);\n      }\n    };\n  }\n\n  return {\n    read:\n    /**\n    * @param {?} cb\n    * @return {?}\n    */\n    function read(cb) {\n      return cb();\n    },\n    write:\n    /**\n    * @param {?} cb\n    * @return {?}\n    */\n    function write(cb) {\n      return cb();\n    }\n  };\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar IonicRouteStrategy =\n/** @class */\nfunction () {\n  function IonicRouteStrategy() {}\n  /**\n   * @param {?} _route\n   * @return {?}\n   */\n\n\n  IonicRouteStrategy.prototype.shouldDetach =\n  /**\n  * @param {?} _route\n  * @return {?}\n  */\n  function (_route) {\n    return false;\n  };\n  /**\n   * @param {?} _route\n   * @return {?}\n   */\n\n\n  IonicRouteStrategy.prototype.shouldAttach =\n  /**\n  * @param {?} _route\n  * @return {?}\n  */\n  function (_route) {\n    return false;\n  };\n  /**\n   * @param {?} _route\n   * @param {?} _detachedTree\n   * @return {?}\n   */\n\n\n  IonicRouteStrategy.prototype.store =\n  /**\n  * @param {?} _route\n  * @param {?} _detachedTree\n  * @return {?}\n  */\n  function (_route, _detachedTree) {\n    return;\n  };\n  /**\n   * @param {?} _route\n   * @return {?}\n   */\n\n\n  IonicRouteStrategy.prototype.retrieve =\n  /**\n  * @param {?} _route\n  * @return {?}\n  */\n  function (_route) {\n    return null;\n  };\n  /**\n   * @param {?} future\n   * @param {?} curr\n   * @return {?}\n   */\n\n\n  IonicRouteStrategy.prototype.shouldReuseRoute =\n  /**\n  * @param {?} future\n  * @param {?} curr\n  * @return {?}\n  */\n  function (future, curr) {\n    if (future.routeConfig !== curr.routeConfig) {\n      return false;\n    } // checking router params\n\n    /** @type {?} */\n\n\n    var futureParams = future.params;\n    /** @type {?} */\n\n    var currentParams = curr.params;\n    /** @type {?} */\n\n    var keysA = Object.keys(futureParams);\n    /** @type {?} */\n\n    var keysB = Object.keys(currentParams);\n\n    if (keysA.length !== keysB.length) {\n      return false;\n    } // Test for A's keys different from B.\n\n\n    for (var _i = 0, keysA_1 = keysA; _i < keysA_1.length; _i++) {\n      var key = keysA_1[_i];\n\n      if (currentParams[key] !== futureParams[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return IonicRouteStrategy;\n}();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar didInitialize = false;\n/** @type {?} */\n\nvar appInitialize =\n/**\n* @param {?} config\n* @param {?} doc\n* @param {?} zone\n* @return {?}\n*/\nfunction appInitialize(config, doc, zone) {\n  return (\n    /**\n    * @return {?}\n    */\n    function () {\n      /** @type {?} */\n      var win =\n      /** @type {?} */\n      doc.defaultView;\n\n      if (win) {\n        if (didInitialize) {\n          console.warn('Ionic Angular was already initialized. Make sure IonicModule.forRoot() is just called once.');\n        }\n\n        didInitialize = true;\n        /** @type {?} */\n\n        var Ionic = win.Ionic = win.Ionic || {};\n        Ionic.config = __assign({}, config, {\n          _zoneGate:\n          /**\n          * @param {?} h\n          * @return {?}\n          */\n          function _zoneGate(h) {\n            return zone.run(h);\n          }\n        });\n        /** @type {?} */\n\n        var aelFn_1 = '__zone_symbol__addEventListener' in\n        /** @type {?} */\n        doc.body ? '__zone_symbol__addEventListener' : 'addEventListener';\n        return applyPolyfills().then(\n        /**\n        * @return {?}\n        */\n        function () {\n          return defineCustomElements(win, {\n            exclude: ['ion-tabs', 'ion-tab'],\n            syncQueue: true,\n            raf: raf,\n            jmp:\n            /**\n            * @param {?} h\n            * @return {?}\n            */\n            function jmp(h) {\n              return zone.runOutsideAngular(h);\n            },\n            ael:\n            /**\n            * @param {?} elm\n            * @param {?} eventName\n            * @param {?} cb\n            * @param {?} opts\n            * @return {?}\n            */\n            function ael(elm, eventName, cb, opts) {\n              /** @type {?} */\n              elm[aelFn_1](eventName, cb, opts);\n            },\n            rel:\n            /**\n            * @param {?} elm\n            * @param {?} eventName\n            * @param {?} cb\n            * @param {?} opts\n            * @return {?}\n            */\n            function rel(elm, eventName, cb, opts) {\n              elm.removeEventListener(eventName, cb, opts);\n            }\n          });\n        });\n      }\n    }\n  );\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar DECLARATIONS = [// proxies\nIonApp, IonAvatar, IonBackButton, IonBackdrop, IonBadge, IonButton, IonButtons, IonCard, IonCardContent, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCheckbox, IonChip, IonCol, IonContent, IonDatetime, IonFab, IonFabButton, IonFabList, IonFooter, IonGrid, IonHeader, IonIcon, IonImg, IonInfiniteScroll, IonInfiniteScrollContent, IonInput, IonItem, IonItemDivider, IonItemGroup, IonItemOption, IonItemOptions, IonItemSliding, IonLabel, IonList, IonListHeader, IonMenu, IonMenuButton, IonMenuToggle, IonNav, IonNavLink, IonNavPop, IonNavPush, IonNavSetRoot, IonNote, IonProgressBar, IonRadio, IonRadioGroup, IonRange, IonRefresher, IonRefresherContent, IonReorder, IonReorderGroup, IonRippleEffect, IonRow, IonSearchbar, IonSegment, IonSegmentButton, IonSelect, IonSelectOption, IonSkeletonText, IonSlide, IonSlides, IonSpinner, IonSplitPane, IonTabBar, IonTabButton, IonText, IonTextarea, IonThumbnail, IonToggle, IonToolbar, IonTitle, IonTabs, // ngModel accessors\nBooleanValueAccessor, NumericValueAccessor, RadioValueAccessor, SelectValueAccessor, TextValueAccessor, // navigation\nIonRouterOutlet, IonBackButtonDelegate, NavDelegate, RouterLinkDelegate, // virtual scroll\nVirtualFooter, VirtualHeader, VirtualItem, IonVirtualScroll, // Deprecations\nCssUtilsDeprecations];\n\nvar IonicModule =\n/** @class */\nfunction () {\n  function IonicModule() {}\n  /**\n   * @param {?=} config\n   * @return {?}\n   */\n\n\n  IonicModule.forRoot =\n  /**\n  * @param {?=} config\n  * @return {?}\n  */\n  function (config) {\n    return {\n      ngModule: IonicModule,\n      providers: [{\n        provide: ConfigToken,\n        useValue: config\n      }, {\n        provide: APP_INITIALIZER,\n        useFactory: appInitialize,\n        multi: true,\n        deps: [ConfigToken, DOCUMENT, NgZone]\n      }]\n    };\n  };\n\n  IonicModule.ɵfac = function IonicModule_Factory(t) {\n    return new (t || IonicModule)();\n  };\n\n  IonicModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: IonicModule\n  });\n  IonicModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [AngularDelegate, ModalController, PopoverController],\n    imports: [[CommonModule]]\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  (function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IonicModule, {\n      declarations: function declarations() {\n        return [IonApp, IonAvatar, IonBackButton, IonBackdrop, IonBadge, IonButton, IonButtons, IonCard, IonCardContent, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCheckbox, IonChip, IonCol, IonContent, IonDatetime, IonFab, IonFabButton, IonFabList, IonFooter, IonGrid, IonHeader, IonIcon, IonImg, IonInfiniteScroll, IonInfiniteScrollContent, IonInput, IonItem, IonItemDivider, IonItemGroup, IonItemOption, IonItemOptions, IonItemSliding, IonLabel, IonList, IonListHeader, IonMenu, IonMenuButton, IonMenuToggle, IonNav, IonNavLink, IonNavPop, IonNavPush, IonNavSetRoot, IonNote, IonProgressBar, IonRadio, IonRadioGroup, IonRange, IonRefresher, IonRefresherContent, IonReorder, IonReorderGroup, IonRippleEffect, IonRow, IonSearchbar, IonSegment, IonSegmentButton, IonSelect, IonSelectOption, IonSkeletonText, IonSlide, IonSlides, IonSpinner, IonSplitPane, IonTabBar, IonTabButton, IonText, IonTextarea, IonThumbnail, IonToggle, IonToolbar, IonTitle, IonTabs, BooleanValueAccessor, NumericValueAccessor, RadioValueAccessor, SelectValueAccessor, TextValueAccessor, IonRouterOutlet, IonBackButtonDelegate, NavDelegate, RouterLinkDelegate, VirtualFooter, VirtualHeader, VirtualItem, IonVirtualScroll, CssUtilsDeprecations];\n      },\n      imports: function imports() {\n        return [CommonModule];\n      },\n      exports: function exports() {\n        return [IonApp, IonAvatar, IonBackButton, IonBackdrop, IonBadge, IonButton, IonButtons, IonCard, IonCardContent, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCheckbox, IonChip, IonCol, IonContent, IonDatetime, IonFab, IonFabButton, IonFabList, IonFooter, IonGrid, IonHeader, IonIcon, IonImg, IonInfiniteScroll, IonInfiniteScrollContent, IonInput, IonItem, IonItemDivider, IonItemGroup, IonItemOption, IonItemOptions, IonItemSliding, IonLabel, IonList, IonListHeader, IonMenu, IonMenuButton, IonMenuToggle, IonNav, IonNavLink, IonNavPop, IonNavPush, IonNavSetRoot, IonNote, IonProgressBar, IonRadio, IonRadioGroup, IonRange, IonRefresher, IonRefresherContent, IonReorder, IonReorderGroup, IonRippleEffect, IonRow, IonSearchbar, IonSegment, IonSegmentButton, IonSelect, IonSelectOption, IonSkeletonText, IonSlide, IonSlides, IonSpinner, IonSplitPane, IonTabBar, IonTabButton, IonText, IonTextarea, IonThumbnail, IonToggle, IonToolbar, IonTitle, IonTabs, BooleanValueAccessor, NumericValueAccessor, RadioValueAccessor, SelectValueAccessor, TextValueAccessor, IonRouterOutlet, IonBackButtonDelegate, NavDelegate, RouterLinkDelegate, VirtualFooter, VirtualHeader, VirtualItem, IonVirtualScroll, CssUtilsDeprecations];\n      }\n    });\n  })();\n\n  return IonicModule;\n}();\n\nexport { ActionSheetController, AlertController, AngularDelegate, BooleanValueAccessor, Config, CssUtilsDeprecations, DomController, Events, IonApp, IonAvatar, IonBackButton, IonBackButtonDelegate, IonBackdrop, IonBadge, IonButton, IonButtons, IonCard, IonCardContent, IonCardHeader, IonCardSubtitle, IonCardTitle, IonCheckbox, IonChip, IonCol, IonContent, IonDatetime, IonFab, IonFabButton, IonFabList, IonFooter, IonGrid, IonHeader, IonIcon, IonImg, IonInfiniteScroll, IonInfiniteScrollContent, IonInput, IonItem, IonItemDivider, IonItemGroup, IonItemOption, IonItemOptions, IonItemSliding, IonLabel, IonList, IonListHeader, IonMenu, IonMenuButton, IonMenuToggle, IonNav, IonNavLink, IonNavPop, IonNavPush, IonNavSetRoot, IonNote, IonProgressBar, IonRadio, IonRadioGroup, IonRange, IonRefresher, IonRefresherContent, IonReorder, IonReorderGroup, IonRippleEffect, IonRouterOutlet, IonRow, IonSearchbar, IonSegment, IonSegmentButton, IonSelect, IonSelectOption, IonSkeletonText, IonSlide, IonSlides, IonSpinner, IonSplitPane, IonTabBar, IonTabButton, IonTabs, IonText, IonTextarea, IonThumbnail, IonTitle, IonToggle, IonToolbar, IonVirtualScroll, IonicModule, IonicRouteStrategy, LoadingController, MenuController, ModalController, NavController, NavDelegate, NavParams, NumericValueAccessor, PickerController, Platform, PopoverController, RadioValueAccessor, RouterLinkDelegate, SelectValueAccessor, TextValueAccessor, ToastController, VirtualFooter, VirtualHeader, VirtualItem, ConfigToken as ɵa, ValueAccessor as ɵb, OverlayBaseController as ɵd, appInitialize as ɵe }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}