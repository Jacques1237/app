{"ast":null,"code":"import _defineProperty from \"C:/Users/wwwja/Desktop/Gallery-master/app/Gallery/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"C:/Users/wwwja/Desktop/Gallery-master/app/Gallery/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/wwwja/Desktop/Gallery-master/app/Gallery/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/wwwja/Desktop/Gallery-master/app/Gallery/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"C:/Users/wwwja/Desktop/Gallery-master/app/Gallery/node_modules/@babel/runtime/regenerator\";\nimport { r as registerInstance, d as getIonMode, h, H as Host } from './core-ca0488fc.js';\nimport './config-3c7f3790.js';\nimport { h as createOverlay, j as dismissOverlay, k as getOverlay } from './overlays-10640d86.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\n\nvar ActionSheetController = /*#__PURE__*/function () {\n  function ActionSheetController(hostRef) {\n    _classCallCheck(this, ActionSheetController);\n\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create an action sheet overlay with action sheet options.\n   *\n   * @param options The options to use to create the action sheet.\n   */\n\n\n  _createClass(ActionSheetController, [{\n    key: \"create\",\n    value: function create(options) {\n      return createOverlay('ion-action-sheet', options);\n    }\n    /**\n     * Dismiss the open action sheet overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the action sheet.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the action sheet.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss(data, role, id) {\n      return dismissOverlay(document, data, role, 'ion-action-sheet', id);\n    }\n    /**\n     * Get the most recently opened action sheet overlay.\n     */\n\n  }, {\n    key: \"getTop\",\n    value: function () {\n      var _getTop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", getOverlay(document, 'ion-action-sheet'));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getTop() {\n        return _getTop.apply(this, arguments);\n      }\n\n      return getTop;\n    }()\n  }]);\n\n  return ActionSheetController;\n}();\n\nvar AlertController = /*#__PURE__*/function () {\n  function AlertController(hostRef) {\n    _classCallCheck(this, AlertController);\n\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create an alert overlay with alert options.\n   *\n   * @param options The options to use to create the alert.\n   */\n\n\n  _createClass(AlertController, [{\n    key: \"create\",\n    value: function create(options) {\n      return createOverlay('ion-alert', options);\n    }\n    /**\n     * Dismiss the open alert overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the alert.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the alert.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss(data, role, id) {\n      return dismissOverlay(document, data, role, 'ion-alert', id);\n    }\n    /**\n     * Get the most recently opened alert overlay.\n     */\n\n  }, {\n    key: \"getTop\",\n    value: function () {\n      var _getTop2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", getOverlay(document, 'ion-alert'));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getTop() {\n        return _getTop2.apply(this, arguments);\n      }\n\n      return getTop;\n    }()\n  }]);\n\n  return AlertController;\n}();\n\nvar Anchor = /*#__PURE__*/function () {\n  function Anchor(hostRef) {\n    var _this = this;\n\n    _classCallCheck(this, Anchor);\n\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n\n    this.routerDirection = 'forward';\n\n    this.onClick = function (ev) {\n      openURL(_this.href, ev, _this.routerDirection);\n    };\n  }\n\n  _createClass(Anchor, [{\n    key: \"componentDidLoad\",\n    value: function componentDidLoad() {\n      console.warn('[DEPRECATED][ion-anchor] The <ion-anchor> component has been deprecated. Please use an <ion-router-link> if you are using a vanilla JS or Stencil project or an <a> with the Angular router.');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _Object$assign;\n\n      var mode = getIonMode(this);\n      var attrs = {\n        href: this.href,\n        rel: this.rel\n      };\n      return h(Host, {\n        onClick: this.onClick,\n        class: Object.assign(Object.assign({}, createColorClasses(this.color)), (_Object$assign = {}, _defineProperty(_Object$assign, mode, true), _defineProperty(_Object$assign, 'ion-activatable', true), _Object$assign))\n      }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null)));\n    }\n  }], [{\n    key: \"style\",\n    get: function get() {\n      return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n    }\n  }]);\n\n  return Anchor;\n}();\n\nvar LoadingController = /*#__PURE__*/function () {\n  function LoadingController(hostRef) {\n    _classCallCheck(this, LoadingController);\n\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a loading overlay with loading options.\n   *\n   * @param options The options to use to create the loading.\n   */\n\n\n  _createClass(LoadingController, [{\n    key: \"create\",\n    value: function create(options) {\n      return createOverlay('ion-loading', options);\n    }\n    /**\n     * Dismiss the open loading overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the loading.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the loading.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss(data, role, id) {\n      return dismissOverlay(document, data, role, 'ion-loading', id);\n    }\n    /**\n     * Get the most recently opened loading overlay.\n     */\n\n  }, {\n    key: \"getTop\",\n    value: function () {\n      var _getTop3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", getOverlay(document, 'ion-loading'));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getTop() {\n        return _getTop3.apply(this, arguments);\n      }\n\n      return getTop;\n    }()\n  }]);\n\n  return LoadingController;\n}();\n\nvar ModalController = /*#__PURE__*/function () {\n  function ModalController(hostRef) {\n    _classCallCheck(this, ModalController);\n\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a modal overlay with modal options.\n   *\n   * @param options The options to use to create the modal.\n   */\n\n\n  _createClass(ModalController, [{\n    key: \"create\",\n    value: function create(options) {\n      return createOverlay('ion-modal', options);\n    }\n    /**\n     * Dismiss the open modal overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the modal.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the modal.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss(data, role, id) {\n      return dismissOverlay(document, data, role, 'ion-modal', id);\n    }\n    /**\n     * Get the most recently opened modal overlay.\n     */\n\n  }, {\n    key: \"getTop\",\n    value: function () {\n      var _getTop4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", getOverlay(document, 'ion-modal'));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getTop() {\n        return _getTop4.apply(this, arguments);\n      }\n\n      return getTop;\n    }()\n  }]);\n\n  return ModalController;\n}();\n\nvar PickerController = /*#__PURE__*/function () {\n  function PickerController(hostRef) {\n    _classCallCheck(this, PickerController);\n\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a picker overlay with picker options.\n   *\n   * @param options The options to use to create the picker.\n   */\n\n\n  _createClass(PickerController, [{\n    key: \"create\",\n    value: function create(options) {\n      return createOverlay('ion-picker', options);\n    }\n    /**\n     * Dismiss the open picker overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the picker.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the picker.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss(data, role, id) {\n      return dismissOverlay(document, data, role, 'ion-picker', id);\n    }\n    /**\n     * Get the most recently opened picker overlay.\n     */\n\n  }, {\n    key: \"getTop\",\n    value: function () {\n      var _getTop5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", getOverlay(document, 'ion-picker'));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getTop() {\n        return _getTop5.apply(this, arguments);\n      }\n\n      return getTop;\n    }()\n  }]);\n\n  return PickerController;\n}();\n\nvar PopoverController = /*#__PURE__*/function () {\n  function PopoverController(hostRef) {\n    _classCallCheck(this, PopoverController);\n\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a popover overlay with popover options.\n   *\n   * @param options The options to use to create the popover.\n   */\n\n\n  _createClass(PopoverController, [{\n    key: \"create\",\n    value: function create(options) {\n      return createOverlay('ion-popover', options);\n    }\n    /**\n     * Dismiss the open popover overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the popover.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the popover.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss(data, role, id) {\n      return dismissOverlay(document, data, role, 'ion-popover', id);\n    }\n    /**\n     * Get the most recently opened popover overlay.\n     */\n\n  }, {\n    key: \"getTop\",\n    value: function () {\n      var _getTop6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", getOverlay(document, 'ion-popover'));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function getTop() {\n        return _getTop6.apply(this, arguments);\n      }\n\n      return getTop;\n    }()\n  }]);\n\n  return PopoverController;\n}();\n\nvar ToastController = /*#__PURE__*/function () {\n  function ToastController(hostRef) {\n    _classCallCheck(this, ToastController);\n\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a toast overlay with toast options.\n   *\n   * @param options The options to use to create the toast.\n   */\n\n\n  _createClass(ToastController, [{\n    key: \"create\",\n    value: function create(options) {\n      return createOverlay('ion-toast', options);\n    }\n    /**\n     * Dismiss the open toast overlay.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\n     * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\n     */\n\n  }, {\n    key: \"dismiss\",\n    value: function dismiss(data, role, id) {\n      return dismissOverlay(document, data, role, 'ion-toast', id);\n    }\n    /**\n     * Get the most recently opened toast overlay.\n     */\n\n  }, {\n    key: \"getTop\",\n    value: function () {\n      var _getTop7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", getOverlay(document, 'ion-toast'));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function getTop() {\n        return _getTop7.apply(this, arguments);\n      }\n\n      return getTop;\n    }()\n  }]);\n\n  return ToastController;\n}();\n\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, Anchor as ion_anchor, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };","map":null,"metadata":{},"sourceType":"module"}